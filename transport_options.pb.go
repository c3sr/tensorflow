// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: transport_options.proto

package tensorflow

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Extra data needed on a non-RDMA RecvBufResponse.
type RecvBufRespExtra struct {
	TensorContent []byte `protobuf:"bytes,1,opt,name=tensor_content,json=tensorContent,proto3" json:"tensor_content,omitempty"`
}

func (m *RecvBufRespExtra) Reset()         { *m = RecvBufRespExtra{} }
func (m *RecvBufRespExtra) String() string { return proto.CompactTextString(m) }
func (*RecvBufRespExtra) ProtoMessage()    {}
func (*RecvBufRespExtra) Descriptor() ([]byte, []int) {
	return fileDescriptor_c21dedb1bbd27e4a, []int{0}
}
func (m *RecvBufRespExtra) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecvBufRespExtra) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecvBufRespExtra.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecvBufRespExtra) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecvBufRespExtra.Merge(m, src)
}
func (m *RecvBufRespExtra) XXX_Size() int {
	return m.Size()
}
func (m *RecvBufRespExtra) XXX_DiscardUnknown() {
	xxx_messageInfo_RecvBufRespExtra.DiscardUnknown(m)
}

var xxx_messageInfo_RecvBufRespExtra proto.InternalMessageInfo

func (m *RecvBufRespExtra) GetTensorContent() []byte {
	if m != nil {
		return m.TensorContent
	}
	return nil
}

func init() {
	proto.RegisterType((*RecvBufRespExtra)(nil), "tensorflow.RecvBufRespExtra")
}

func init() { proto.RegisterFile("transport_options.proto", fileDescriptor_c21dedb1bbd27e4a) }

var fileDescriptor_c21dedb1bbd27e4a = []byte{
	// 168 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2f, 0x29, 0x4a, 0xcc,
	0x2b, 0x2e, 0xc8, 0x2f, 0x2a, 0x89, 0xcf, 0x2f, 0x28, 0xc9, 0xcc, 0xcf, 0x2b, 0xd6, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2a, 0x49, 0xcd, 0x2b, 0xce, 0x2f, 0x4a, 0xcb, 0xc9, 0x2f, 0x57,
	0xb2, 0xe4, 0x12, 0x08, 0x4a, 0x4d, 0x2e, 0x73, 0x2a, 0x4d, 0x0b, 0x4a, 0x2d, 0x2e, 0x70, 0xad,
	0x28, 0x29, 0x4a, 0x14, 0x52, 0xe5, 0xe2, 0x83, 0xa8, 0x88, 0x4f, 0xce, 0xcf, 0x2b, 0x49, 0xcd,
	0x2b, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x09, 0xe2, 0x85, 0x88, 0x3a, 0x43, 0x04, 0x9d, 0xac,
	0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5,
	0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x4a, 0x31, 0x3d, 0xb3, 0x24, 0xa3,
	0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0xbf, 0x28, 0x31, 0x53, 0xb7, 0xa0, 0x28, 0x3f, 0x2b, 0x35,
	0xb9, 0x44, 0x1f, 0x61, 0x6f, 0x12, 0x1b, 0xd8, 0x29, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x02, 0x6b, 0x72, 0x09, 0xa5, 0x00, 0x00, 0x00,
}

func (m *RecvBufRespExtra) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecvBufRespExtra) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TensorContent) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTransportOptions(dAtA, i, uint64(len(m.TensorContent)))
		i += copy(dAtA[i:], m.TensorContent)
	}
	return i, nil
}

func encodeVarintTransportOptions(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RecvBufRespExtra) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TensorContent)
	if l > 0 {
		n += 1 + l + sovTransportOptions(uint64(l))
	}
	return n
}

func sovTransportOptions(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTransportOptions(x uint64) (n int) {
	return sovTransportOptions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RecvBufRespExtra) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransportOptions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecvBufRespExtra: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecvBufRespExtra: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TensorContent", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransportOptions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransportOptions
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTransportOptions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TensorContent = append(m.TensorContent[:0], dAtA[iNdEx:postIndex]...)
			if m.TensorContent == nil {
				m.TensorContent = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransportOptions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransportOptions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTransportOptions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTransportOptions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTransportOptions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransportOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransportOptions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTransportOptions
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTransportOptions
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTransportOptions
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTransportOptions(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTransportOptions
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTransportOptions = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTransportOptions   = fmt.Errorf("proto: integer overflow")
)
