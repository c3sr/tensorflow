// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: op_gen_overrides.proto

package tensorflow

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Used to override the default API & behavior in the generated code
// for client languages, from what you would get from the OpDef alone.
// This is so we can evolve the API while remaining backwards
// compatible when interpretting old graphs.  Overrides go in an
// "op_gen_overrides.pbtxt" file with a text-format OpGenOverrides
// message.  Right now these only apply to the C++ API.
// TODO(josh11b): In the future there will be a common set of overrides
// and per-client-language overrides.
//
// WARNING: Be *very* careful using these features -- these overrides
// can change the semantics of existing code.  These changes may need
// to wait until a major release of TensorFlow to avoid breaking our
// compatibility promises.
type OpGenOverride struct {
	// Name of the op to apply overrides to.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Do not include this op in the generated API.
	// If `skip` is true, all other overrides are ignored for this op.
	Skip bool `protobuf:"varint,2,opt,name=skip,proto3" json:"skip,omitempty"`
	// Hide this op by putting it into an internal namespace (or whatever
	// is appropriate in the target language).
	Hide bool `protobuf:"varint,3,opt,name=hide,proto3" json:"hide,omitempty"`
	// Use a different name in the API than the op's name. Note that
	// the op's name in `backticks` will also be replaced in the docs.
	RenameTo string `protobuf:"bytes,4,opt,name=rename_to,json=renameTo,proto3" json:"rename_to,omitempty"`
	// Create *additional* API endpoints with different names (contrast
	// with rename_to, which affects the original name).
	Alias        []string                     `protobuf:"bytes,5,rep,name=alias" json:"alias,omitempty"`
	AttrDefault  []*OpGenOverride_AttrDefault `protobuf:"bytes,6,rep,name=attr_default,json=attrDefault" json:"attr_default,omitempty"`
	AttrRename   []*OpGenOverride_Rename      `protobuf:"bytes,7,rep,name=attr_rename,json=attrRename" json:"attr_rename,omitempty"`
	InputRename  []*OpGenOverride_Rename      `protobuf:"bytes,8,rep,name=input_rename,json=inputRename" json:"input_rename,omitempty"`
	OutputRename []*OpGenOverride_Rename      `protobuf:"bytes,9,rep,name=output_rename,json=outputRename" json:"output_rename,omitempty"`
}

func (m *OpGenOverride) Reset()                    { *m = OpGenOverride{} }
func (m *OpGenOverride) String() string            { return proto.CompactTextString(m) }
func (*OpGenOverride) ProtoMessage()               {}
func (*OpGenOverride) Descriptor() ([]byte, []int) { return fileDescriptorOpGenOverrides, []int{0} }

func (m *OpGenOverride) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OpGenOverride) GetSkip() bool {
	if m != nil {
		return m.Skip
	}
	return false
}

func (m *OpGenOverride) GetHide() bool {
	if m != nil {
		return m.Hide
	}
	return false
}

func (m *OpGenOverride) GetRenameTo() string {
	if m != nil {
		return m.RenameTo
	}
	return ""
}

func (m *OpGenOverride) GetAlias() []string {
	if m != nil {
		return m.Alias
	}
	return nil
}

func (m *OpGenOverride) GetAttrDefault() []*OpGenOverride_AttrDefault {
	if m != nil {
		return m.AttrDefault
	}
	return nil
}

func (m *OpGenOverride) GetAttrRename() []*OpGenOverride_Rename {
	if m != nil {
		return m.AttrRename
	}
	return nil
}

func (m *OpGenOverride) GetInputRename() []*OpGenOverride_Rename {
	if m != nil {
		return m.InputRename
	}
	return nil
}

func (m *OpGenOverride) GetOutputRename() []*OpGenOverride_Rename {
	if m != nil {
		return m.OutputRename
	}
	return nil
}

// Map the name of an attr to a new default value to use.  This
// default will be used when creating new graphs, as opposed to the
// default in the OpDef, which will be used when interpreting old
// GraphDefs.  If this attr is also renamed (using attr_rename
// below), use the original name of the attr.
type OpGenOverride_AttrDefault struct {
	Name  string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value *AttrValue `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *OpGenOverride_AttrDefault) Reset()         { *m = OpGenOverride_AttrDefault{} }
func (m *OpGenOverride_AttrDefault) String() string { return proto.CompactTextString(m) }
func (*OpGenOverride_AttrDefault) ProtoMessage()    {}
func (*OpGenOverride_AttrDefault) Descriptor() ([]byte, []int) {
	return fileDescriptorOpGenOverrides, []int{0, 0}
}

func (m *OpGenOverride_AttrDefault) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OpGenOverride_AttrDefault) GetValue() *AttrValue {
	if m != nil {
		return m.Value
	}
	return nil
}

// Change the name used to access attrs/inputs/outputs in the API
// from what is used in the GraphDef.  Note that these names in
// `backticks` will also be replaced in the docs.
type OpGenOverride_Rename struct {
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To   string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *OpGenOverride_Rename) Reset()         { *m = OpGenOverride_Rename{} }
func (m *OpGenOverride_Rename) String() string { return proto.CompactTextString(m) }
func (*OpGenOverride_Rename) ProtoMessage()    {}
func (*OpGenOverride_Rename) Descriptor() ([]byte, []int) {
	return fileDescriptorOpGenOverrides, []int{0, 1}
}

func (m *OpGenOverride_Rename) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *OpGenOverride_Rename) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

type OpGenOverrides struct {
	Op []*OpGenOverride `protobuf:"bytes,1,rep,name=op" json:"op,omitempty"`
}

func (m *OpGenOverrides) Reset()                    { *m = OpGenOverrides{} }
func (m *OpGenOverrides) String() string            { return proto.CompactTextString(m) }
func (*OpGenOverrides) ProtoMessage()               {}
func (*OpGenOverrides) Descriptor() ([]byte, []int) { return fileDescriptorOpGenOverrides, []int{1} }

func (m *OpGenOverrides) GetOp() []*OpGenOverride {
	if m != nil {
		return m.Op
	}
	return nil
}

func init() {
	proto.RegisterType((*OpGenOverride)(nil), "tensorflow.OpGenOverride")
	proto.RegisterType((*OpGenOverride_AttrDefault)(nil), "tensorflow.OpGenOverride.AttrDefault")
	proto.RegisterType((*OpGenOverride_Rename)(nil), "tensorflow.OpGenOverride.Rename")
	proto.RegisterType((*OpGenOverrides)(nil), "tensorflow.OpGenOverrides")
}
func (m *OpGenOverride) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpGenOverride) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOpGenOverrides(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Skip {
		dAtA[i] = 0x10
		i++
		if m.Skip {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Hide {
		dAtA[i] = 0x18
		i++
		if m.Hide {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.RenameTo) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOpGenOverrides(dAtA, i, uint64(len(m.RenameTo)))
		i += copy(dAtA[i:], m.RenameTo)
	}
	if len(m.Alias) > 0 {
		for _, s := range m.Alias {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.AttrDefault) > 0 {
		for _, msg := range m.AttrDefault {
			dAtA[i] = 0x32
			i++
			i = encodeVarintOpGenOverrides(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AttrRename) > 0 {
		for _, msg := range m.AttrRename {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintOpGenOverrides(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.InputRename) > 0 {
		for _, msg := range m.InputRename {
			dAtA[i] = 0x42
			i++
			i = encodeVarintOpGenOverrides(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.OutputRename) > 0 {
		for _, msg := range m.OutputRename {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintOpGenOverrides(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *OpGenOverride_AttrDefault) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpGenOverride_AttrDefault) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOpGenOverrides(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Value != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOpGenOverrides(dAtA, i, uint64(m.Value.Size()))
		n1, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *OpGenOverride_Rename) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpGenOverride_Rename) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.From) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOpGenOverrides(dAtA, i, uint64(len(m.From)))
		i += copy(dAtA[i:], m.From)
	}
	if len(m.To) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOpGenOverrides(dAtA, i, uint64(len(m.To)))
		i += copy(dAtA[i:], m.To)
	}
	return i, nil
}

func (m *OpGenOverrides) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpGenOverrides) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Op) > 0 {
		for _, msg := range m.Op {
			dAtA[i] = 0xa
			i++
			i = encodeVarintOpGenOverrides(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintOpGenOverrides(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *OpGenOverride) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOpGenOverrides(uint64(l))
	}
	if m.Skip {
		n += 2
	}
	if m.Hide {
		n += 2
	}
	l = len(m.RenameTo)
	if l > 0 {
		n += 1 + l + sovOpGenOverrides(uint64(l))
	}
	if len(m.Alias) > 0 {
		for _, s := range m.Alias {
			l = len(s)
			n += 1 + l + sovOpGenOverrides(uint64(l))
		}
	}
	if len(m.AttrDefault) > 0 {
		for _, e := range m.AttrDefault {
			l = e.Size()
			n += 1 + l + sovOpGenOverrides(uint64(l))
		}
	}
	if len(m.AttrRename) > 0 {
		for _, e := range m.AttrRename {
			l = e.Size()
			n += 1 + l + sovOpGenOverrides(uint64(l))
		}
	}
	if len(m.InputRename) > 0 {
		for _, e := range m.InputRename {
			l = e.Size()
			n += 1 + l + sovOpGenOverrides(uint64(l))
		}
	}
	if len(m.OutputRename) > 0 {
		for _, e := range m.OutputRename {
			l = e.Size()
			n += 1 + l + sovOpGenOverrides(uint64(l))
		}
	}
	return n
}

func (m *OpGenOverride_AttrDefault) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOpGenOverrides(uint64(l))
	}
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovOpGenOverrides(uint64(l))
	}
	return n
}

func (m *OpGenOverride_Rename) Size() (n int) {
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovOpGenOverrides(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovOpGenOverrides(uint64(l))
	}
	return n
}

func (m *OpGenOverrides) Size() (n int) {
	var l int
	_ = l
	if len(m.Op) > 0 {
		for _, e := range m.Op {
			l = e.Size()
			n += 1 + l + sovOpGenOverrides(uint64(l))
		}
	}
	return n
}

func sovOpGenOverrides(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOpGenOverrides(x uint64) (n int) {
	return sovOpGenOverrides(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OpGenOverride) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpGenOverrides
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpGenOverride: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpGenOverride: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpGenOverrides
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpGenOverrides
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skip", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpGenOverrides
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Skip = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hide", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpGenOverrides
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Hide = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenameTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpGenOverrides
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpGenOverrides
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RenameTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpGenOverrides
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpGenOverrides
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alias = append(m.Alias, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttrDefault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpGenOverrides
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpGenOverrides
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttrDefault = append(m.AttrDefault, &OpGenOverride_AttrDefault{})
			if err := m.AttrDefault[len(m.AttrDefault)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttrRename", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpGenOverrides
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpGenOverrides
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttrRename = append(m.AttrRename, &OpGenOverride_Rename{})
			if err := m.AttrRename[len(m.AttrRename)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputRename", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpGenOverrides
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpGenOverrides
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InputRename = append(m.InputRename, &OpGenOverride_Rename{})
			if err := m.InputRename[len(m.InputRename)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputRename", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpGenOverrides
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpGenOverrides
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputRename = append(m.OutputRename, &OpGenOverride_Rename{})
			if err := m.OutputRename[len(m.OutputRename)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpGenOverrides(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpGenOverrides
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpGenOverride_AttrDefault) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpGenOverrides
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttrDefault: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttrDefault: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpGenOverrides
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpGenOverrides
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpGenOverrides
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpGenOverrides
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &AttrValue{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpGenOverrides(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpGenOverrides
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpGenOverride_Rename) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpGenOverrides
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rename: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rename: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpGenOverrides
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpGenOverrides
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpGenOverrides
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpGenOverrides
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpGenOverrides(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpGenOverrides
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpGenOverrides) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpGenOverrides
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpGenOverrides: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpGenOverrides: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpGenOverrides
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpGenOverrides
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Op = append(m.Op, &OpGenOverride{})
			if err := m.Op[len(m.Op)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpGenOverrides(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpGenOverrides
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOpGenOverrides(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOpGenOverrides
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOpGenOverrides
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOpGenOverrides
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthOpGenOverrides
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOpGenOverrides
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOpGenOverrides(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOpGenOverrides = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOpGenOverrides   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("op_gen_overrides.proto", fileDescriptorOpGenOverrides) }

var fileDescriptorOpGenOverrides = []byte{
	// 363 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x4f, 0x4b, 0xf3, 0x40,
	0x10, 0xc6, 0xdf, 0xa4, 0x69, 0xdf, 0x66, 0xd2, 0x96, 0xb2, 0xa8, 0xac, 0x15, 0x42, 0x28, 0x08,
	0x11, 0x25, 0x87, 0x7a, 0xf4, 0x54, 0xff, 0xa0, 0x27, 0x0b, 0x8b, 0x78, 0x0d, 0x91, 0x6e, 0x35,
	0x98, 0x66, 0xc2, 0x66, 0x53, 0xbf, 0x86, 0x17, 0xbf, 0x93, 0x47, 0x3f, 0x82, 0xd4, 0x2f, 0x22,
	0xbb, 0xdb, 0xd2, 0x16, 0x2c, 0xf4, 0xf6, 0xcc, 0x64, 0x9e, 0xdf, 0x3e, 0xc3, 0x04, 0x0e, 0xb0,
	0x88, 0x9f, 0x79, 0x1e, 0xe3, 0x8c, 0x0b, 0x91, 0x8e, 0x79, 0x19, 0x15, 0x02, 0x25, 0x12, 0x90,
	0x3c, 0x2f, 0x51, 0x4c, 0x32, 0x7c, 0xeb, 0x75, 0x13, 0x29, 0x45, 0x3c, 0x4b, 0xb2, 0x8a, 0x9b,
	0xaf, 0xfd, 0x0f, 0x07, 0xda, 0xa3, 0xe2, 0x96, 0xe7, 0xa3, 0x85, 0x8d, 0x10, 0x70, 0xf2, 0x64,
	0xca, 0xa9, 0x15, 0x58, 0xa1, 0xcb, 0xb4, 0x56, 0xbd, 0xf2, 0x35, 0x2d, 0xa8, 0x1d, 0x58, 0x61,
	0x93, 0x69, 0xad, 0x7a, 0x2f, 0xe9, 0x98, 0xd3, 0x9a, 0xe9, 0x29, 0x4d, 0x8e, 0xc0, 0x15, 0x5c,
	0x39, 0x62, 0x89, 0xd4, 0xd1, 0x80, 0xa6, 0x69, 0x3c, 0x20, 0xd9, 0x83, 0x7a, 0x92, 0xa5, 0x49,
	0x49, 0xeb, 0x41, 0x2d, 0x74, 0x99, 0x29, 0xc8, 0x1d, 0xb4, 0x74, 0xa8, 0x31, 0x9f, 0x24, 0x55,
	0x26, 0x69, 0x23, 0xa8, 0x85, 0xde, 0xe0, 0x38, 0x5a, 0xa5, 0x8e, 0x36, 0xf2, 0x45, 0x43, 0x29,
	0xc5, 0xb5, 0x19, 0x66, 0x5e, 0xb2, 0x2a, 0xc8, 0x10, 0x74, 0x19, 0x9b, 0x07, 0xe9, 0x7f, 0x0d,
	0x0a, 0xb6, 0x83, 0x98, 0x9e, 0x63, 0xa0, 0x4c, 0x46, 0x93, 0x2b, 0x68, 0xa5, 0x79, 0x51, 0xc9,
	0x25, 0xa3, 0xb9, 0x23, 0xc3, 0xd3, 0xae, 0x05, 0xe4, 0x06, 0xda, 0x58, 0xc9, 0x35, 0x8a, 0xbb,
	0x23, 0xa5, 0x65, 0x6c, 0xa6, 0xea, 0xdd, 0x83, 0xb7, 0xb6, 0xea, 0x9f, 0x67, 0x39, 0x85, 0xba,
	0xbe, 0xa5, 0xbe, 0x8b, 0x37, 0xd8, 0x5f, 0x7f, 0x41, 0x79, 0x1f, 0xd5, 0x47, 0x66, 0x66, 0x7a,
	0x67, 0xd0, 0x58, 0x04, 0x24, 0xe0, 0x4c, 0x04, 0x4e, 0x97, 0x28, 0xa5, 0x49, 0x07, 0x6c, 0x89,
	0x9a, 0xe3, 0x32, 0x5b, 0x62, 0xff, 0x02, 0x3a, 0x1b, 0x19, 0x4b, 0x72, 0x02, 0x36, 0x16, 0xd4,
	0xd2, 0xbb, 0x1c, 0x6e, 0xdd, 0x85, 0xd9, 0x58, 0x5c, 0x76, 0x3f, 0xe7, 0xbe, 0xf5, 0x35, 0xf7,
	0xad, 0xef, 0xb9, 0x6f, 0xbd, 0xff, 0xf8, 0xff, 0x9e, 0x1a, 0xfa, 0x6f, 0x3b, 0xff, 0x0d, 0x00,
	0x00, 0xff, 0xff, 0x57, 0x70, 0x82, 0x2b, 0xa5, 0x02, 0x00, 0x00,
}
