FROM carml/base:amd64-gpu-latest
MAINTAINER Abdul Dakkak <dakkak@illinois.edu>

# Build-time metadata as defined at http://label-schema.org
ARG BUILD_DATE
ARG VCS_REF
ARG VCS_URL
ARG VERSION
ARG ARCH
ARG FRAMEWORK_VERSION
LABEL org.carml.tensorflow.build-date=$BUILD_DATE \
  org.carml.tensorflow.name="tensorflow agent" \
  org.carml.tensorflow.description="" \
  org.carml.tensorflow.url="https://www.carml.org/" \
  org.carml.tensorflow.vcs-ref=$VCS_REF \
  org.carml.tensorflow.vcs-url=$VCS_URL \
  org.carml.tensorflow.vendor="MLModelScope" \
  org.carml.tensorflow.arch=$ARCH \
  org.carml.tensorflow.version=$VERSION \
  org.carml.tensorflow.framework_version=$FRAMEWORK_VERSION \
  org.carml.tensorflow.schema-version="1.0"

########## INSTALLATION STEPS ###################

ENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH
ENV LD_LIBRARY_PATH /usr/local/cuda/lib64:$LD_LIBRARY_PATH
ENV LD_LIBRARY_PATH /usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH

RUN add-apt-repository ppa:webupd8team/java &&\
  apt-get update -y && apt-get install -y --no-install-recommends \
    openjdk-8-jdk \
    wget \
    curl \
    unzip \
    zip \
    git \
    rsync \
    python-dev \
    swig \
    python-pip \
    libcurl3-dev \
    libfreetype6-dev \
    libzmq3-dev \
    libhdf5-dev \
		libc-ares-dev \
		gpg-agent && \
  rm -rf /var/lib/apt/lists/*

# Install bazel (https://docs.bazel.build/versions/master/install-ubuntu.html)
#RUN echo "deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8" | tee /etc/apt/sources.list.d/bazel.list && \
#  curl https://bazel.build/bazel-release.pub.gpg | apt-key add - && \
#	apt-get update && \
#  apt-get -y install bazel && \
#  apt-get -y install --only-upgrade bazel && \
#  bazel version

# Install bazel
RUN apt-get update && \
	apt-get install -y --no-install-recommends \
   bash-completion \
   g++ \
   zlib1g-dev && \
	curl -LO "https://github.com/bazelbuild/bazel/releases/download/0.18.0/bazel_0.18.0-linux-x86_64.deb" && \
	dpkg -i bazel_*.deb && \
	bazel version


# install pre-requisites
RUN pip install -U setuptools && \
  pip --no-cache-dir install \
  six \
  numpy \
  wheel

# get rai-project/tensorflow repository
ENV PKG github.com/rai-project/tensorflow
WORKDIR $GOPATH/src/$PKG

RUN git clone --depth=1 --branch=master https://${PKG}.git . && \
  cd $GOPATH/src/$PKG && \
  dep ensure -vendor-only -v

RUN cd ${GOPATH}/src/$PKG/vendor/github.com/tensorflow/tensorflow && \
  export GCC_HOST_COMPILER_PATH=/usr/bin/gcc && \
  export PYTHON_BIN_PATH=/usr/bin/python && \
  export USE_DEFAULT_PYTHON_LIB_PATH=1 && \
  export TF_NEED_GCP=1 && \
  export TF_NEED_HDFS=1 && \
  export TF_NEED_JEMALLOC=1 && \
  export TF_ENABLE_XLA=1 && \
  export TF_NEED_OPENCL=0 && \
  export TF_NEED_CUDA=1 && \
  export TF_CUDA_VERSION=10.0 && \
  export CUDA_TOOLKIT_PATH=/usr/local/cuda && \
  export TF_CUDA_COMPUTE_CAPABILITIES=3.0,3.5,3.7,5.0,5.2,5.3,6.0,6.1,6.2,7.0,7.5 && \
  export CUDNN_INSTALL_PATH=/usr/lib/x86_64-linux-gnu  && \
  export TF_NEED_MKL=0 && \
  export TF_NEED_VERBS=0 && \
  export TF_NEED_MPI=0 && \
  export TF_CUDA_CLANG=0 && \
  ./configure && \
  export LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH} && \
  bazel build -c opt --incompatible_remove_native_http_archive=false --define=grpc_no_ares=true //tensorflow:libtensorflow.so

RUN	export LD_LIBRARY_PATH=${GOPATH}/src/$PKG/vendor/github.com/tensorflow/tensorflow/bazel-bin/tensorflow:${LD_LIBRARY_PATH} && \
	ls -la ${GOPATH}/src/$PKG/vendor/github.com/tensorflow/tensorflow/bazel-bin/tensorflow && \
	cp ${GOPATH}/src/$PKG/vendor/github.com/tensorflow/tensorflow/bazel-bin/tensorflow/libtensorflow.so /usr/local/lib

ENV LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH}
ENV LD_LIBRARY_PATH=${GOPATH}/src/$PKG/vendor/github.com/tensorflow/tensorflow/bazel-bin/tensorflow:${LD_LIBRARY_PATH}

RUN cd $GOPATH/src/$PKG && \
  go build -a -installsuffix cgo -ldflags "-s -w -X ${PKG}/Version=${VERSION} -X ${PKG}/GitCommit=${VCS_REF} -X ${PKG}/BuildDate=${BUILD_DATE}"&& \
  cd tensorflow-agent && \
  go install && \
  cd .. && \
  rm -fr vendor

ENTRYPOINT ["tensorflow-agent"]
