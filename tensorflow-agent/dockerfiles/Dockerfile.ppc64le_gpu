FROM carml/base:ppc64le-gpu-latest
MAINTAINER Abdul Dakkak <dakkak@illinois.edu>

# Build-time metadata as defined at http://label-schema.org
ARG BUILD_DATE
ARG VCS_REF
ARG VCS_URL
ARG VERSION
ARG ARCH
ARG FRAMEWORK_VERSION
LABEL org.carml.tensorflow.build-date=$BUILD_DATE \
  org.carml.tensorflow.name="tensorflow agent" \
  org.carml.tensorflow.description="" \
  org.carml.tensorflow.url="https://www.carml.org/" \
  org.carml.tensorflow.vcs-ref=$VCS_REF \
  org.carml.tensorflow.vcs-url=$VCS_URL \
  org.carml.tensorflow.vendor="MLModelScope" \
  org.carml.tensorflow.arch=$ARCH \
  org.carml.tensorflow.version=$VERSION \
  org.carml.tensorflow.framework_version=$FRAMEWORK_VERSION \
  org.carml.tensorflow.schema-version="1.0"

########## INSTALLATION STEPS ###################

ENV JAVA_HOME /usr/lib/jvm/java-1.8.0-openjdk-ppc64el
ENV JRE_HOME ${JAVA_HOME}/jre
ENV PATH ${JAVA_HOME}/bin:$PATH

ENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH
ENV LD_LIBRARY_PATH /usr/local/cuda/lib64:$LD_LIBRARY_PATH

RUN add-apt-repository ppa:webupd8team/java &&\
  apt-get update -y && apt-get install -y --no-install-recommends \
    openjdk-8-jdk \
    wget \
    curl \
    unzip \
    zip \
    git \
    rsync \
    python-dev \
    swig \
    python-pip \
    libcurl3-dev \
    libfreetype6-dev \
    libzmq3-dev \
    libhdf5-dev && \
  rm -rf /var/lib/apt/lists/*

# install bazel (from source)
 # Build and install bazel
ENV BAZEL_VERSION 0.19.2
WORKDIR /
RUN mkdir /bazel && \
    cd /bazel && \
    curl -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-dist.zip && \
    unzip bazel-$BAZEL_VERSION-dist.zip && \
    bash ./compile.sh && \
    cp output/bazel /usr/local/bin/ && \
    rm -rf /bazel && \
    cd - && \
    bazel version 

# install pre-requisites
RUN pip install -U setuptools && \
  pip --no-cache-dir install \
  six \
  numpy \
  wheel

# get rai-project/tensorflow repository
ENV PKG github.com/rai-project/tensorflow
WORKDIR $GOPATH/src/$PKG

RUN git clone --depth=1 --branch=master https://${PKG}.git . && \
  cd $GOPATH/src/$PKG && \
  dep ensure -vendor-only -v

RUN cd ${GOPATH}/src/$PKG/vendor/github.com/tensorflow/tensorflow && \
  export CC_OPT_FLAGS="-mcpu=power8 -mtune=power8" && \
  export GCC_HOST_COMPILER_PATH=/usr/bin/gcc && \
  export PYTHON_BIN_PATH=/usr/bin/python && \
  export USE_DEFAULT_PYTHON_LIB_PATH=1 && \
  export TF_NEED_GCP=1 && \
  export TF_NEED_HDFS=1 && \
  export TF_NEED_JEMALLOC=1 && \
  export TF_ENABLE_XLA=1 && \
  export TF_NEED_OPENCL=0 && \
  export TF_NEED_CUDA=1 && \
  export TF_CUDA_VERSION=10 && \
  export CUDA_TOOLKIT_PATH=/usr/local/cuda && \
  export TF_CUDA_COMPUTE_CAPABILITIES=3.0,3.5,3.7,5.0,5.2,5.3,6.0,6.1,6.2,7.0,7.5 && \
  export CUDNN_INSTALL_PATH=/usr/lib/powerpc64le-linux-gnu && \
  export TF_NEED_MKL=0 && \
  export TF_NEED_VERBS=0 && \
  export TF_NEED_MPI=0 && \
  export TF_CUDA_CLANG=0 && \
  ./configure && \
  ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 && \
  export LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH} && \
  tensorflow/tools/ci_build/builds/configured GPU \
  bazel build -c opt --local_resources=32000,8,1.0 --config=cuda --incompatible_remove_native_http_archive=false --define=grpc_no_ares=true //tensorflow:libtensorflow.so

RUN export LD_LIBRARY_PATH=${GOPATH}/src/$PKG/vendor/github.com/tensorflow/tensorflow/bazel-bin/tensorflow:${LD_LIBRARY_PATH} && \
  ls -la ${GOPATH}/src/$PKG/vendor/github.com/tensorflow/tensorflow/bazel-bin/tensorflow && \
  cp ${GOPATH}/src/$PKG/vendor/github.com/tensorflow/tensorflow/bazel-bin/tensorflow/libtensorflow.so /usr/local/lib

ENV LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH}
ENV LD_LIBRARY_PATH=${GOPATH}/src/$PKG/vendor/github.com/tensorflow/tensorflow/bazel-bin/tensorflow:${LD_LIBRARY_PATH}

RUN cd $GOPATH/src/$PKG && \
  go build -a -installsuffix cgo -ldflags "-s -w -X ${PKG}/Version=${VERSION} -X ${PKG}/GitCommit=${VCS_REF} -X ${PKG}/BuildDate=${BUILD_DATE}"&& \
  cd tensorflow-agent && \
  go install && \
  cd .. && \
  rm -fr vendor

ENTRYPOINT ["tensorflow-agent"]
