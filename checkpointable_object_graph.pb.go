// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: checkpointable_object_graph.proto

package tensorflow

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CheckpointableObjectGraph struct {
	Nodes []*CheckpointableObjectGraph_CheckpointableObject `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (m *CheckpointableObjectGraph) Reset()         { *m = CheckpointableObjectGraph{} }
func (m *CheckpointableObjectGraph) String() string { return proto.CompactTextString(m) }
func (*CheckpointableObjectGraph) ProtoMessage()    {}
func (*CheckpointableObjectGraph) Descriptor() ([]byte, []int) {
	return fileDescriptor_567954406438c8c4, []int{0}
}
func (m *CheckpointableObjectGraph) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckpointableObjectGraph) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckpointableObjectGraph.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckpointableObjectGraph) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckpointableObjectGraph.Merge(m, src)
}
func (m *CheckpointableObjectGraph) XXX_Size() int {
	return m.Size()
}
func (m *CheckpointableObjectGraph) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckpointableObjectGraph.DiscardUnknown(m)
}

var xxx_messageInfo_CheckpointableObjectGraph proto.InternalMessageInfo

func (m *CheckpointableObjectGraph) GetNodes() []*CheckpointableObjectGraph_CheckpointableObject {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type CheckpointableObjectGraph_CheckpointableObject struct {
	// Objects which this object depends on.
	Children []*CheckpointableObjectGraph_CheckpointableObject_ObjectReference `protobuf:"bytes,1,rep,name=children,proto3" json:"children,omitempty"`
	// Serialized data specific to this object.
	Attributes []*CheckpointableObjectGraph_CheckpointableObject_SerializedTensor `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
	// Slot variables owned by this object.
	SlotVariables []*CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference `protobuf:"bytes,3,rep,name=slot_variables,json=slotVariables,proto3" json:"slot_variables,omitempty"`
}

func (m *CheckpointableObjectGraph_CheckpointableObject) Reset() {
	*m = CheckpointableObjectGraph_CheckpointableObject{}
}
func (m *CheckpointableObjectGraph_CheckpointableObject) String() string {
	return proto.CompactTextString(m)
}
func (*CheckpointableObjectGraph_CheckpointableObject) ProtoMessage() {}
func (*CheckpointableObjectGraph_CheckpointableObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_567954406438c8c4, []int{0, 0}
}
func (m *CheckpointableObjectGraph_CheckpointableObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckpointableObjectGraph_CheckpointableObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckpointableObjectGraph_CheckpointableObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckpointableObjectGraph_CheckpointableObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckpointableObjectGraph_CheckpointableObject.Merge(m, src)
}
func (m *CheckpointableObjectGraph_CheckpointableObject) XXX_Size() int {
	return m.Size()
}
func (m *CheckpointableObjectGraph_CheckpointableObject) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckpointableObjectGraph_CheckpointableObject.DiscardUnknown(m)
}

var xxx_messageInfo_CheckpointableObjectGraph_CheckpointableObject proto.InternalMessageInfo

func (m *CheckpointableObjectGraph_CheckpointableObject) GetChildren() []*CheckpointableObjectGraph_CheckpointableObject_ObjectReference {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *CheckpointableObjectGraph_CheckpointableObject) GetAttributes() []*CheckpointableObjectGraph_CheckpointableObject_SerializedTensor {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *CheckpointableObjectGraph_CheckpointableObject) GetSlotVariables() []*CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference {
	if m != nil {
		return m.SlotVariables
	}
	return nil
}

type CheckpointableObjectGraph_CheckpointableObject_ObjectReference struct {
	// An index into `CheckpointableObjectGraph.nodes`, indicating the object
	// being referenced.
	NodeId int32 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// A user-provided name for the edge.
	LocalName string `protobuf:"bytes,2,opt,name=local_name,json=localName,proto3" json:"local_name,omitempty"`
}

func (m *CheckpointableObjectGraph_CheckpointableObject_ObjectReference) Reset() {
	*m = CheckpointableObjectGraph_CheckpointableObject_ObjectReference{}
}
func (m *CheckpointableObjectGraph_CheckpointableObject_ObjectReference) String() string {
	return proto.CompactTextString(m)
}
func (*CheckpointableObjectGraph_CheckpointableObject_ObjectReference) ProtoMessage() {}
func (*CheckpointableObjectGraph_CheckpointableObject_ObjectReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_567954406438c8c4, []int{0, 0, 0}
}
func (m *CheckpointableObjectGraph_CheckpointableObject_ObjectReference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckpointableObjectGraph_CheckpointableObject_ObjectReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckpointableObjectGraph_CheckpointableObject_ObjectReference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckpointableObjectGraph_CheckpointableObject_ObjectReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckpointableObjectGraph_CheckpointableObject_ObjectReference.Merge(m, src)
}
func (m *CheckpointableObjectGraph_CheckpointableObject_ObjectReference) XXX_Size() int {
	return m.Size()
}
func (m *CheckpointableObjectGraph_CheckpointableObject_ObjectReference) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckpointableObjectGraph_CheckpointableObject_ObjectReference.DiscardUnknown(m)
}

var xxx_messageInfo_CheckpointableObjectGraph_CheckpointableObject_ObjectReference proto.InternalMessageInfo

func (m *CheckpointableObjectGraph_CheckpointableObject_ObjectReference) GetNodeId() int32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *CheckpointableObjectGraph_CheckpointableObject_ObjectReference) GetLocalName() string {
	if m != nil {
		return m.LocalName
	}
	return ""
}

type CheckpointableObjectGraph_CheckpointableObject_SerializedTensor struct {
	// A name for the Tensor. Simple variables have only one
	// `SerializedTensor` named "VARIABLE_VALUE" by convention. This value may
	// be restored on object creation as an optimization.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The full name of the variable/tensor, if applicable. Used to allow
	// name-based loading of checkpoints which were saved using an
	// object-based API. Should match the checkpoint key which would have been
	// assigned by tf.train.Saver.
	FullName string `protobuf:"bytes,2,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	// The generated name of the Tensor in the checkpoint.
	CheckpointKey string `protobuf:"bytes,3,opt,name=checkpoint_key,json=checkpointKey,proto3" json:"checkpoint_key,omitempty"`
}

func (m *CheckpointableObjectGraph_CheckpointableObject_SerializedTensor) Reset() {
	*m = CheckpointableObjectGraph_CheckpointableObject_SerializedTensor{}
}
func (m *CheckpointableObjectGraph_CheckpointableObject_SerializedTensor) String() string {
	return proto.CompactTextString(m)
}
func (*CheckpointableObjectGraph_CheckpointableObject_SerializedTensor) ProtoMessage() {}
func (*CheckpointableObjectGraph_CheckpointableObject_SerializedTensor) Descriptor() ([]byte, []int) {
	return fileDescriptor_567954406438c8c4, []int{0, 0, 1}
}
func (m *CheckpointableObjectGraph_CheckpointableObject_SerializedTensor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckpointableObjectGraph_CheckpointableObject_SerializedTensor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckpointableObjectGraph_CheckpointableObject_SerializedTensor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckpointableObjectGraph_CheckpointableObject_SerializedTensor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckpointableObjectGraph_CheckpointableObject_SerializedTensor.Merge(m, src)
}
func (m *CheckpointableObjectGraph_CheckpointableObject_SerializedTensor) XXX_Size() int {
	return m.Size()
}
func (m *CheckpointableObjectGraph_CheckpointableObject_SerializedTensor) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckpointableObjectGraph_CheckpointableObject_SerializedTensor.DiscardUnknown(m)
}

var xxx_messageInfo_CheckpointableObjectGraph_CheckpointableObject_SerializedTensor proto.InternalMessageInfo

func (m *CheckpointableObjectGraph_CheckpointableObject_SerializedTensor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CheckpointableObjectGraph_CheckpointableObject_SerializedTensor) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *CheckpointableObjectGraph_CheckpointableObject_SerializedTensor) GetCheckpointKey() string {
	if m != nil {
		return m.CheckpointKey
	}
	return ""
}

type CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference struct {
	// An index into `CheckpointableObjectGraph.nodes`, indicating the
	// variable object this slot was created for.
	OriginalVariableNodeId int32 `protobuf:"varint,1,opt,name=original_variable_node_id,json=originalVariableNodeId,proto3" json:"original_variable_node_id,omitempty"`
	// The name of the slot (e.g. "m"/"v").
	SlotName string `protobuf:"bytes,2,opt,name=slot_name,json=slotName,proto3" json:"slot_name,omitempty"`
	// An index into `CheckpointableObjectGraph.nodes`, indicating the
	// `Object` with the value of the slot variable.
	SlotVariableNodeId int32 `protobuf:"varint,3,opt,name=slot_variable_node_id,json=slotVariableNodeId,proto3" json:"slot_variable_node_id,omitempty"`
}

func (m *CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference) Reset() {
	*m = CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference{}
}
func (m *CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference) String() string {
	return proto.CompactTextString(m)
}
func (*CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference) ProtoMessage() {}
func (*CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_567954406438c8c4, []int{0, 0, 2}
}
func (m *CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference.Merge(m, src)
}
func (m *CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference) XXX_Size() int {
	return m.Size()
}
func (m *CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference.DiscardUnknown(m)
}

var xxx_messageInfo_CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference proto.InternalMessageInfo

func (m *CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference) GetOriginalVariableNodeId() int32 {
	if m != nil {
		return m.OriginalVariableNodeId
	}
	return 0
}

func (m *CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference) GetSlotName() string {
	if m != nil {
		return m.SlotName
	}
	return ""
}

func (m *CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference) GetSlotVariableNodeId() int32 {
	if m != nil {
		return m.SlotVariableNodeId
	}
	return 0
}

func init() {
	proto.RegisterType((*CheckpointableObjectGraph)(nil), "tensorflow.CheckpointableObjectGraph")
	proto.RegisterType((*CheckpointableObjectGraph_CheckpointableObject)(nil), "tensorflow.CheckpointableObjectGraph.CheckpointableObject")
	proto.RegisterType((*CheckpointableObjectGraph_CheckpointableObject_ObjectReference)(nil), "tensorflow.CheckpointableObjectGraph.CheckpointableObject.ObjectReference")
	proto.RegisterType((*CheckpointableObjectGraph_CheckpointableObject_SerializedTensor)(nil), "tensorflow.CheckpointableObjectGraph.CheckpointableObject.SerializedTensor")
	proto.RegisterType((*CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference)(nil), "tensorflow.CheckpointableObjectGraph.CheckpointableObject.SlotVariableReference")
}

func init() { proto.RegisterFile("checkpointable_object_graph.proto", fileDescriptor_567954406438c8c4) }

var fileDescriptor_567954406438c8c4 = []byte{
	// 448 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xb3, 0x0d, 0x09, 0xf5, 0xa0, 0x16, 0xb4, 0xa2, 0xe0, 0xba, 0xc2, 0x4a, 0x91, 0x90,
	0x72, 0xc1, 0x15, 0x70, 0x82, 0x03, 0x07, 0x38, 0xa0, 0x52, 0xa9, 0x54, 0x06, 0x71, 0xe0, 0x62,
	0xad, 0xed, 0x71, 0xbc, 0xcd, 0xc6, 0x6b, 0xad, 0x37, 0x54, 0xe5, 0x29, 0x78, 0x06, 0x9e, 0x80,
	0x47, 0xe0, 0xc8, 0xb1, 0x47, 0x8e, 0x28, 0x79, 0x09, 0x8e, 0x68, 0x37, 0x69, 0x6c, 0x57, 0xe1,
	0x42, 0x6f, 0xf6, 0xec, 0xfc, 0xdf, 0xbf, 0x33, 0xbf, 0x0d, 0xfb, 0x49, 0x8e, 0xc9, 0xb8, 0x94,
	0xbc, 0xd0, 0x2c, 0x16, 0x18, 0xc9, 0xf8, 0x14, 0x13, 0x1d, 0x8d, 0x14, 0x2b, 0xf3, 0xa0, 0x54,
	0x52, 0x4b, 0x0a, 0x1a, 0x8b, 0x4a, 0xaa, 0x4c, 0xc8, 0xb3, 0x87, 0xdf, 0xfb, 0xb0, 0xfb, 0xba,
	0xa5, 0x78, 0x67, 0x05, 0x6f, 0x4c, 0x3f, 0x3d, 0x81, 0x5e, 0x21, 0x53, 0xac, 0x5c, 0x32, 0xe8,
	0x0e, 0x6f, 0x3d, 0x7d, 0x11, 0xd4, 0xca, 0xe0, 0x9f, 0xaa, 0xb5, 0x27, 0xe1, 0x02, 0xe4, 0xfd,
	0xe8, 0xc1, 0xdd, 0x75, 0xe7, 0x34, 0x83, 0xcd, 0x24, 0xe7, 0x22, 0x55, 0x58, 0x2c, 0xdd, 0xde,
	0xfe, 0xbf, 0x5b, 0xb0, 0x34, 0xc5, 0x0c, 0x15, 0x16, 0x09, 0x86, 0x2b, 0x36, 0x1d, 0x03, 0x30,
	0xad, 0x15, 0x8f, 0xa7, 0x1a, 0x2b, 0x77, 0xc3, 0x3a, 0x1d, 0x5d, 0xc3, 0xe9, 0x3d, 0x2a, 0xce,
	0x04, 0xff, 0x82, 0xe9, 0x07, 0xcb, 0x08, 0x1b, 0x78, 0x7a, 0x06, 0xdb, 0x95, 0x90, 0x3a, 0xfa,
	0xcc, 0x14, 0x37, 0x9a, 0xca, 0xed, 0x5a, 0xc3, 0x93, 0xeb, 0x18, 0x0a, 0xa9, 0x3f, 0x2e, 0x79,
	0xf5, 0x80, 0x5b, 0x55, 0xa3, 0x5c, 0x79, 0x87, 0x70, 0xfb, 0xca, 0x0a, 0xe8, 0x7d, 0xb8, 0x69,
	0x22, 0x88, 0x78, 0xea, 0x92, 0x01, 0x19, 0xf6, 0xc2, 0xbe, 0x79, 0x3d, 0x4c, 0xe9, 0x03, 0x00,
	0x21, 0x13, 0x26, 0xa2, 0x82, 0x4d, 0xd0, 0xdd, 0x18, 0x90, 0xa1, 0x13, 0x3a, 0xb6, 0x72, 0xcc,
	0x26, 0xe8, 0x9d, 0xc2, 0x9d, 0xab, 0x33, 0x52, 0x0a, 0x37, 0x6c, 0x33, 0xb1, 0xcd, 0xf6, 0x99,
	0xee, 0x81, 0x93, 0x4d, 0x45, 0x8b, 0xb2, 0x69, 0x0a, 0x06, 0x42, 0x1f, 0xc1, 0x76, 0xfd, 0x5d,
	0x46, 0x63, 0x3c, 0x77, 0xbb, 0xb6, 0x63, 0xab, 0xae, 0x1e, 0xe1, 0xb9, 0xf7, 0x8d, 0xc0, 0xce,
	0xda, 0xf9, 0xe8, 0x73, 0xd8, 0x95, 0x8a, 0x8f, 0x78, 0xc1, 0xc4, 0x6a, 0x9b, 0x51, 0x7b, 0x9e,
	0x7b, 0x97, 0x0d, 0x97, 0xea, 0xe3, 0xc5, 0x7c, 0x7b, 0xe0, 0xd8, 0x10, 0x9a, 0x17, 0x33, 0x05,
	0x7b, 0xb1, 0x27, 0xb0, 0xd3, 0x4a, 0x68, 0xc5, 0xec, 0x5a, 0x26, 0x6d, 0xae, 0x75, 0xc1, 0x7b,
	0xf5, 0xf2, 0xe7, 0xcc, 0x27, 0x17, 0x33, 0x9f, 0xfc, 0x9e, 0xf9, 0xe4, 0xeb, 0xdc, 0xef, 0x5c,
	0xcc, 0xfd, 0xce, 0xaf, 0xb9, 0xdf, 0xf9, 0xb4, 0x3f, 0xe2, 0x3a, 0x9f, 0xc6, 0x41, 0x22, 0x27,
	0x07, 0x8a, 0xf1, 0xc7, 0xa5, 0x92, 0x26, 0x83, 0x83, 0x3a, 0xec, 0x3f, 0x84, 0xc4, 0x7d, 0xfb,
	0x17, 0x3e, 0xfb, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x95, 0x20, 0x97, 0xd5, 0xaa, 0x03, 0x00, 0x00,
}

func (m *CheckpointableObjectGraph) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckpointableObjectGraph) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, msg := range m.Nodes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCheckpointableObjectGraph(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CheckpointableObjectGraph_CheckpointableObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckpointableObjectGraph_CheckpointableObject) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Children) > 0 {
		for _, msg := range m.Children {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCheckpointableObjectGraph(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Attributes) > 0 {
		for _, msg := range m.Attributes {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCheckpointableObjectGraph(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.SlotVariables) > 0 {
		for _, msg := range m.SlotVariables {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintCheckpointableObjectGraph(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CheckpointableObjectGraph_CheckpointableObject_ObjectReference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckpointableObjectGraph_CheckpointableObject_ObjectReference) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NodeId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckpointableObjectGraph(dAtA, i, uint64(m.NodeId))
	}
	if len(m.LocalName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckpointableObjectGraph(dAtA, i, uint64(len(m.LocalName)))
		i += copy(dAtA[i:], m.LocalName)
	}
	return i, nil
}

func (m *CheckpointableObjectGraph_CheckpointableObject_SerializedTensor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckpointableObjectGraph_CheckpointableObject_SerializedTensor) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCheckpointableObjectGraph(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.FullName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckpointableObjectGraph(dAtA, i, uint64(len(m.FullName)))
		i += copy(dAtA[i:], m.FullName)
	}
	if len(m.CheckpointKey) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCheckpointableObjectGraph(dAtA, i, uint64(len(m.CheckpointKey)))
		i += copy(dAtA[i:], m.CheckpointKey)
	}
	return i, nil
}

func (m *CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OriginalVariableNodeId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCheckpointableObjectGraph(dAtA, i, uint64(m.OriginalVariableNodeId))
	}
	if len(m.SlotName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCheckpointableObjectGraph(dAtA, i, uint64(len(m.SlotName)))
		i += copy(dAtA[i:], m.SlotName)
	}
	if m.SlotVariableNodeId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCheckpointableObjectGraph(dAtA, i, uint64(m.SlotVariableNodeId))
	}
	return i, nil
}

func encodeVarintCheckpointableObjectGraph(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CheckpointableObjectGraph) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovCheckpointableObjectGraph(uint64(l))
		}
	}
	return n
}

func (m *CheckpointableObjectGraph_CheckpointableObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Children) > 0 {
		for _, e := range m.Children {
			l = e.Size()
			n += 1 + l + sovCheckpointableObjectGraph(uint64(l))
		}
	}
	if len(m.Attributes) > 0 {
		for _, e := range m.Attributes {
			l = e.Size()
			n += 1 + l + sovCheckpointableObjectGraph(uint64(l))
		}
	}
	if len(m.SlotVariables) > 0 {
		for _, e := range m.SlotVariables {
			l = e.Size()
			n += 1 + l + sovCheckpointableObjectGraph(uint64(l))
		}
	}
	return n
}

func (m *CheckpointableObjectGraph_CheckpointableObject_ObjectReference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeId != 0 {
		n += 1 + sovCheckpointableObjectGraph(uint64(m.NodeId))
	}
	l = len(m.LocalName)
	if l > 0 {
		n += 1 + l + sovCheckpointableObjectGraph(uint64(l))
	}
	return n
}

func (m *CheckpointableObjectGraph_CheckpointableObject_SerializedTensor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCheckpointableObjectGraph(uint64(l))
	}
	l = len(m.FullName)
	if l > 0 {
		n += 1 + l + sovCheckpointableObjectGraph(uint64(l))
	}
	l = len(m.CheckpointKey)
	if l > 0 {
		n += 1 + l + sovCheckpointableObjectGraph(uint64(l))
	}
	return n
}

func (m *CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OriginalVariableNodeId != 0 {
		n += 1 + sovCheckpointableObjectGraph(uint64(m.OriginalVariableNodeId))
	}
	l = len(m.SlotName)
	if l > 0 {
		n += 1 + l + sovCheckpointableObjectGraph(uint64(l))
	}
	if m.SlotVariableNodeId != 0 {
		n += 1 + sovCheckpointableObjectGraph(uint64(m.SlotVariableNodeId))
	}
	return n
}

func sovCheckpointableObjectGraph(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCheckpointableObjectGraph(x uint64) (n int) {
	return sovCheckpointableObjectGraph(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CheckpointableObjectGraph) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckpointableObjectGraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckpointableObjectGraph: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckpointableObjectGraph: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpointableObjectGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckpointableObjectGraph
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCheckpointableObjectGraph
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &CheckpointableObjectGraph_CheckpointableObject{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckpointableObjectGraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckpointableObjectGraph
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCheckpointableObjectGraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckpointableObjectGraph_CheckpointableObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckpointableObjectGraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckpointableObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckpointableObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Children", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpointableObjectGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckpointableObjectGraph
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCheckpointableObjectGraph
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Children = append(m.Children, &CheckpointableObjectGraph_CheckpointableObject_ObjectReference{})
			if err := m.Children[len(m.Children)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpointableObjectGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckpointableObjectGraph
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCheckpointableObjectGraph
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attributes = append(m.Attributes, &CheckpointableObjectGraph_CheckpointableObject_SerializedTensor{})
			if err := m.Attributes[len(m.Attributes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotVariables", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpointableObjectGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckpointableObjectGraph
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCheckpointableObjectGraph
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlotVariables = append(m.SlotVariables, &CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference{})
			if err := m.SlotVariables[len(m.SlotVariables)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckpointableObjectGraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckpointableObjectGraph
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCheckpointableObjectGraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckpointableObjectGraph_CheckpointableObject_ObjectReference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckpointableObjectGraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectReference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectReference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			m.NodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpointableObjectGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpointableObjectGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckpointableObjectGraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckpointableObjectGraph
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckpointableObjectGraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckpointableObjectGraph
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCheckpointableObjectGraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckpointableObjectGraph_CheckpointableObject_SerializedTensor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckpointableObjectGraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SerializedTensor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SerializedTensor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpointableObjectGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckpointableObjectGraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckpointableObjectGraph
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpointableObjectGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckpointableObjectGraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckpointableObjectGraph
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FullName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckpointKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpointableObjectGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckpointableObjectGraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckpointableObjectGraph
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckpointKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCheckpointableObjectGraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckpointableObjectGraph
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCheckpointableObjectGraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckpointableObjectGraph_CheckpointableObject_SlotVariableReference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckpointableObjectGraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlotVariableReference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlotVariableReference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalVariableNodeId", wireType)
			}
			m.OriginalVariableNodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpointableObjectGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginalVariableNodeId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpointableObjectGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckpointableObjectGraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckpointableObjectGraph
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlotName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotVariableNodeId", wireType)
			}
			m.SlotVariableNodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpointableObjectGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotVariableNodeId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCheckpointableObjectGraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCheckpointableObjectGraph
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCheckpointableObjectGraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCheckpointableObjectGraph(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCheckpointableObjectGraph
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCheckpointableObjectGraph
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCheckpointableObjectGraph
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCheckpointableObjectGraph
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCheckpointableObjectGraph
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCheckpointableObjectGraph
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCheckpointableObjectGraph(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCheckpointableObjectGraph
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCheckpointableObjectGraph = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCheckpointableObjectGraph   = fmt.Errorf("proto: integer overflow")
)
