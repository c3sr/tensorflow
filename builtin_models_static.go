// Code generated by go-bindata.
// sources:
// builtin_models/Faster_RCNN_ResNet50_COCO.yml
// builtin_models/Mask_RCNN_Inception_v2_COCO.yml
// builtin_models/SSD_MobileNet_v1_COCO.yml
// builtin_models/SSD_MobileNet_v2_COCO.yml
// builtin_models/SSD_MobileNet_v2_Quantized_300x300_COCO.yml
// builtin_models/SSD_ResNet50_FPN_COCO.yml
// DO NOT EDIT!

package tensorflow

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faster_rcnn_resnet50_cocoYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xcd\x6e\xeb\x38\x0f\xdd\xfb\x29\x08\x74\x71\xef\x05\x5a\x3b\xff\x75\xbd\xf8\x80\x0f\x19\xdc\xd5\x20\x05\x8a\xc1\x6c\x05\x59\xa6\x6d\x4d\x6d\xd1\x90\xe8\x26\xed\xd3\x0f\x24\x39\x4e\x82\x76\xd1\xc5\x6c\x02\x29\x3c\xa4\x0e\xc9\x43\xc9\x46\xf6\x58\xc0\x6f\xe9\x18\xad\x78\xd9\x1f\x0e\xe2\x05\xdd\x01\x79\xbb\x10\xfb\xe7\xfd\x33\xdc\x81\x47\x00\xd5\xf0\x4e\xa3\x85\x9e\x2a\xec\x92\xda\xca\x1e\x8f\x64\x5f\x8b\x04\x20\x46\xf8\x0b\x8d\x23\xfb\xbb\xa3\x23\xdc\xc1\x6c\x87\x9a\x2c\x70\x8b\x93\x1f\xc0\x1b\x5a\xa7\xc9\x14\xb0\x4c\x97\xab\x74\x71\x83\x9d\x6c\xa0\xc8\xb0\x95\xda\x70\x72\x85\xf6\xd0\x33\x40\x9b\x9a\x6c\x2f\x39\xae\xc1\x61\x2f\x0d\x6b\x35\xdb\xa3\x35\xf1\x71\xa4\x36\x68\x0b\xb8\x83\x79\xe3\x60\x74\x58\x01\x13\x0c\x68\x3d\x32\x72\x03\x7c\x93\xdd\x18\x62\x26\x00\xb2\xaf\x76\x1b\x9f\x1c\x40\x33\x8c\x05\x58\xa9\x07\x4b\xff\xa0\xe2\x4c\x49\xdb\x77\x0f\x1c\xd2\xad\x3b\x3a\x16\x01\xfb\xa0\x86\x31\xc0\xd5\xf7\xe0\x4d\x80\x0f\x83\xda\x6d\x3a\x2c\xbe\xe7\x39\xa1\x27\xdf\x6f\x30\xbb\x76\xa8\xd0\x29\xab\x07\x0e\xe5\xfc\x5f\x02\xd7\x0d\x7b\x2e\xbd\x3f\xfc\x81\x8c\x2a\x14\x35\x54\xe4\x1e\x8e\xad\x56\x2d\x68\x07\xa1\x1d\x58\x01\x99\xd0\xcc\x20\x8c\x9f\x7b\xea\x7b\x32\x93\xb3\xf3\x8d\xd8\x93\x61\x3c\xf1\x2f\xa8\x24\x4b\x87\x9c\x26\x00\x75\x54\x96\x55\xc6\x08\x8b\xce\x04\x65\x29\x52\x24\x56\x8b\x65\x2e\x16\x4b\xb1\xca\xa1\xb6\xd4\x5f\x13\xaa\x6e\x99\xc0\x07\x51\x9a\x58\xac\xd1\xa2\x51\xe8\x7c\x3f\x2f\xbb\xd0\x4a\x39\xf8\xce\x66\x70\xc4\xd2\x69\x46\xbf\x44\x56\x69\x0a\x31\xef\x52\x9b\xe6\x46\x87\x0f\xd0\x32\x0f\xae\xc8\xb2\x46\x73\x3b\x96\xa9\xa2\x3e\xbb\x94\x2e\x0b\x38\x97\x95\x1d\x95\x59\x1f\x52\xc8\x2c\x3a\x94\x56\xb5\x19\x85\x8c\xc5\x4c\x32\x6b\xd6\x15\xa9\x6c\xde\x8b\xe0\x2c\x3c\xe9\xbe\x4a\x3a\xad\xd0\x38\x2c\xe0\xff\x83\x54\x2d\xc2\x9f\x71\x7f\x0f\x7f\x4f\x6a\x8d\x63\x30\xc1\xfc\xa0\x5d\x78\x6a\x33\x8c\x1c\xd2\x8d\x75\x88\xfb\x40\x9f\xdf\x07\x2c\x40\xf7\xb2\x41\x3f\x44\xda\x3a\x8e\x66\x0f\x95\x9d\xe6\xf7\xa0\x91\x9b\xb6\xfb\xc0\x11\x73\xf6\xbb\x32\x9f\x4f\xbe\x0a\x15\x22\x0c\xd2\x0f\x28\xa3\x75\x51\xa6\x00\xd8\x61\x8f\x86\x45\xa4\x30\x6a\xc3\xf9\x64\x09\x5e\xa2\x93\xef\x7e\xe6\x7e\x84\x43\x44\x2c\xea\x8f\x84\x46\x1e\x46\xf6\x31\xa2\x5f\x49\xa3\xa9\xb4\x69\x4a\x3a\x25\x5f\xf0\x8c\xf0\x19\x05\x25\x9d\xe0\x0e\xe4\x57\x8c\x27\xe8\x4c\x34\xf9\x4c\xfa\x96\x72\xdd\x91\xe4\xf5\x2a\x58\x4a\x3a\xa1\x9b\x29\x5f\x7a\x18\xfe\xff\x11\x2b\x60\xa9\x94\xa5\xee\x34\xeb\x2f\xa1\x4e\x91\x3d\x63\x55\x27\x9d\xfb\x12\x35\x59\x22\xac\x46\xc9\xa3\x45\x27\x46\xdb\x15\xb3\x14\xdd\x3a\x95\xbd\xfc\x20\x23\x8f\x2e\x08\xd2\x31\x59\x4c\xc3\x5c\xa7\x64\x9b\xb3\x2a\x3f\xeb\xd4\xb9\x4a\xf4\x54\xea\x0e\x0d\xb2\x78\x5b\xce\x13\xf6\x28\x96\x4b\xb1\x7c\xcc\x3a\x59\x62\xe7\x52\x3e\xf1\xed\xf9\xaa\x45\xf5\xea\xc6\xbe\x80\xcd\x66\x99\xab\x7c\x5b\x2d\x96\xb8\x53\xf9\xaa\xae\x77\xf9\xe6\xa9\xcc\x57\xeb\xa7\xc7\xed\xd3\x66\x9d\x27\xe1\x28\xaf\x45\x37\xa0\xd2\xb5\x46\x37\xa9\xb2\xb1\x72\x68\x41\x9a\x0a\x8e\xa8\x9b\x96\x1d\x38\x1a\xad\x42\x2f\xd4\x52\x3a\x0c\x49\x26\x10\x71\x62\x90\xdc\xfe\x17\x29\x7f\xe7\x62\xc9\x6a\x4b\x1f\x68\x84\x36\xd3\x65\x21\x02\x87\x74\x28\x13\x00\xed\x84\x1f\x67\xfd\x36\xdd\xbf\xb5\xec\x9c\x9f\x09\x5d\x83\x43\xbe\xf7\xd2\x8a\xd7\xdd\x39\x07\x7f\x13\x4a\xf0\x0b\x26\x90\x06\x26\xef\xe0\x7c\x17\x90\x97\x0c\xaf\xcb\x11\xff\x08\xe1\x2a\x34\xc4\xe8\xd7\x93\x57\xad\x3b\x0c\x2f\xa8\x3b\xab\xf9\x73\x35\x8f\x9a\x5b\x1d\xa9\x5c\x8e\x8c\x47\x5d\xda\x97\x97\x3b\xac\xb0\x5c\x6e\xd6\xdb\xdd\xae\xce\xd7\x0b\x5c\x6f\x1f\x77\xdb\xcd\x3a\x2f\x37\xdb\x55\x5d\x27\x92\xd9\xea\x72\xe4\x78\x7d\xe2\x89\xad\x9c\xfa\x77\xb1\x24\x00\xaf\xda\x54\x05\xec\x0f\x87\x29\x25\xbf\xf7\xd4\x0c\x8e\x56\x76\x60\x90\xc3\x5b\xfd\x73\x7f\x38\xdc\xc3\x8b\xff\x49\xd3\xf4\x97\x9f\x6a\xff\x46\x68\xd3\x88\xe9\xf2\x2f\x60\xfa\x7e\x98\xf6\xf3\xb3\x1b\x3e\x09\x26\x70\x02\xd0\x4b\xa3\x6b\x74\x2c\xe4\xc8\x2d\xd9\x02\xf6\x2d\x9a\x26\xf9\x37\x00\x00\xff\xff\x6a\xbf\x1c\x2f\x98\x08\x00\x00"

func faster_rcnn_resnet50_cocoYmlBytes() ([]byte, error) {
	return bindataRead(
		_faster_rcnn_resnet50_cocoYml,
		"Faster_RCNN_ResNet50_COCO.yml",
	)
}

func faster_rcnn_resnet50_cocoYml() (*asset, error) {
	bytes, err := faster_rcnn_resnet50_cocoYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Faster_RCNN_ResNet50_COCO.yml", size: 2200, mode: os.FileMode(420), modTime: time.Unix(1552457413, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mask_rcnn_inception_v2_cocoYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x41\x6f\xeb\x36\x0c\xbe\xfb\x57\x10\xe8\xa1\xef\x01\xad\x5d\xc7\x79\x6d\xea\xc3\x80\x21\xc3\x80\x01\x5b\x0a\x3c\x0c\xbb\x0a\xb4\x4c\xdb\x5a\x6d\xc9\x90\xe8\x24\xed\xaf\x1f\x24\x39\x4e\x82\xf6\xd0\xc3\x2e\x81\x14\x7e\xa4\x3e\x92\x1f\x25\x6b\x1c\xa8\x84\xbf\xd0\xbd\x8a\x9f\xdb\xdd\x4e\xfc\xa1\x25\x8d\xac\x8c\x16\xfb\x95\xd8\xbe\x6c\x5f\xe0\x06\x3c\x06\x4c\x03\x6f\x66\xb2\x30\x98\x9a\xfa\xa4\xb1\x38\xd0\xc1\xd8\xd7\x32\x01\x88\x31\xfe\x26\xed\x8c\xfd\xbd\x37\x07\xb8\x81\xc5\x0e\x8d\xb1\xc0\x1d\xcd\x7e\x00\x7b\xb2\x4e\x19\x5d\x42\x9e\xe6\xab\xf4\xe1\x0a\x3b\xdb\x40\x1a\xcd\x16\x95\xe6\xe4\x02\xed\xa1\x27\x80\xd2\x8d\xb1\x03\x72\x5c\x83\xa3\x01\x35\x2b\xb9\xd8\xa3\x35\xf1\x71\x50\x69\xb2\x25\xdc\xc0\xb2\x71\x30\x39\xaa\x81\x0d\x8c\x64\x3d\x32\x72\x03\xda\x63\x3f\x85\x98\x09\x00\x0e\xf5\xe3\xda\x27\x07\xd0\x8e\x53\x09\x16\xd5\x68\xcd\xbf\x24\x39\x93\x68\x87\xfe\x9e\x43\xba\x4d\x6f\x0e\x65\xc0\xde\xcb\x71\x0a\x70\xf9\x35\x78\x1b\xe0\xe3\x28\x1f\xd7\x3d\x95\x5f\xf3\x9c\xd1\xb3\xef\x17\x98\x5d\x3a\xd4\xe4\xa4\x55\xa1\xb7\x25\xfc\x92\xc0\x65\xc3\x5e\x2a\xef\x0f\xbf\x11\x93\x0c\x45\x0d\x15\xb9\x83\x43\xa7\x64\x07\xca\x41\x68\x07\xd5\x60\x74\x68\x66\x10\xc6\xb7\xad\x19\x06\xa3\x67\x67\xe7\x1b\xb1\x35\x9a\xe9\xc8\xdf\xa1\x46\x46\x47\x9c\x26\x00\x83\xd7\x96\x95\x5a\x0b\x75\xa9\x2d\x69\xa4\x11\xab\x87\x7c\x23\x1e\x72\xb1\xda\x40\x63\xcd\x70\x49\xa9\xbe\xe6\x02\xef\xc6\xa4\x89\xa5\x86\x2c\x69\x49\xce\x77\xf4\xbc\x0b\xcd\xc4\xd1\xf7\x36\x83\x03\x55\x4e\x31\xf9\x25\xb1\x4c\x53\x88\x99\x57\x4a\xb7\x57\x4a\xbc\x87\x8e\x79\x74\x65\x96\xb5\x8a\xbb\xa9\x4a\xa5\x19\xb2\x73\xf1\xb2\x80\x73\x59\xd5\x9b\x2a\x1b\xd0\x31\xd9\xcc\x92\x23\xb4\xb2\xcb\x4c\xc8\x59\x2c\x24\xb3\xb6\xa8\x8d\xcc\x96\xbd\x08\xce\xc2\x93\x1e\xea\xa4\x57\x92\xb4\xa3\x12\x7e\x1d\x51\x76\x04\x7f\xc6\xfd\x1d\xfc\x33\xeb\x35\x0e\xc2\x0c\xf3\xa3\x76\xe6\xa9\xf4\x38\x71\x48\x37\xd6\x21\xee\x03\x7d\x7e\x1b\xa9\x04\x35\x60\x4b\x7e\x8c\x94\x75\x1c\xcd\x1e\x8a\xbd\xe2\xb7\xa0\x92\xab\xc6\xfb\xc0\x11\x73\xf2\xbb\x30\x9f\x4e\xbe\x08\x15\x22\x8c\xe8\x47\x94\xc9\xba\x28\x54\x00\xea\x69\x20\xcd\x22\x52\x98\x94\xe6\xcd\x6c\x09\x5e\xa2\xc7\x37\x3f\x75\xb7\xe1\x10\x11\x8b\x7a\x9b\x98\x89\xc7\x89\x7d\x8c\xe8\x57\x99\x49\xd7\x4a\xb7\x95\x39\x26\x9f\xf0\x8c\xf0\x05\x05\x95\x39\xc2\x0d\xe0\x67\x8c\x67\xe8\x42\x34\xf9\x48\xfa\x9a\x72\xd3\x1b\xe4\x62\x15\x2c\x95\x39\x92\x5b\x28\x9f\x7b\x18\xfe\xbf\x8d\x15\xb0\xa6\xc2\x4a\xf5\x8a\xd5\xa7\x50\x27\x8d\x3d\x61\x65\x8f\xce\x7d\x8a\x9a\x2d\x11\xd6\x10\xf2\x64\xc9\x89\xc9\xf6\xe5\x22\x45\x57\xa4\x38\xe0\xbb\xd1\x78\x70\x41\x90\x8e\x8d\xa5\x34\x4c\x76\x6a\x6c\x7b\x52\xe5\x47\x9d\x3a\x57\x8b\xc1\x54\xaa\x27\x4d\x2c\xf6\xf9\x32\x61\x4f\x22\xcf\x45\xfe\x94\xf5\x58\x51\xef\x52\x3e\xf2\xf5\xf9\xb2\x23\xf9\xea\xa6\xa1\x84\xf5\x3a\xdf\xc8\xcd\x8f\xfa\x21\xa7\x47\xb9\x59\x35\xcd\xe3\x66\xfd\x5c\x6d\x56\xc5\xf3\xd3\x8f\xe7\x75\xb1\x49\xc2\x51\x5e\x8b\x6e\x24\xa9\x1a\x45\x6e\x56\x65\x6b\x71\xec\x00\x75\x0d\x07\x52\x6d\xc7\x0e\x9c\x99\xac\x24\x2f\xd4\x0a\x1d\x85\x24\x13\x88\x38\x31\x22\x77\xff\x47\xca\x5f\xbb\x5a\xb2\xc6\x9a\x77\xf2\x98\xf9\xba\x10\x81\x45\x3a\x56\x09\x80\x72\xc2\x0f\xb4\xda\xcf\x77\x70\x83\xbd\xf3\x53\xa1\x1a\x70\xc4\x77\x5e\x5c\xf1\xca\x3b\x65\xe1\x6f\x43\x04\xbf\x60\x03\xa8\x61\xf6\x0e\xce\x37\x01\x79\xce\xf1\xb2\x20\xf1\x8f\x10\xae\x26\x6d\x98\xfc\x7a\xf6\x6a\x54\x4f\xe1\x15\x75\x27\x3d\x7f\xac\xe7\x41\x71\xa7\x22\x95\xf3\x91\xf1\xa8\x73\x03\xab\xf5\x13\xad\xd7\x45\x55\xe4\x05\x3e\x3d\x3c\xd3\x5a\x16\xcf\x32\x97\x48\x88\x05\xc9\xaa\x48\x90\xd9\xaa\x6a\xe2\x78\x81\xd2\x91\x2d\xce\x1d\x3c\x5b\x12\x80\x57\xa5\xeb\x12\xb6\xbb\xdd\x9c\x92\xdf\x7b\x6a\x9a\x26\x8b\x3d\x68\xe2\xf0\x5e\x7f\xdb\xee\x76\x77\xf0\xd3\xff\xa4\x69\xfa\xdd\xcf\xb5\x7f\x27\x94\x6e\xc5\xfc\x00\x94\x30\x7f\x43\xcc\xfb\xe5\xe9\x0d\x9f\x05\x33\x38\x3c\x12\x5a\x35\xe4\x58\xe0\xc4\x9d\xb1\x25\x6c\x3b\xd2\x6d\xf2\x5f\x00\x00\x00\xff\xff\x75\xf3\xab\x1c\x9e\x08\x00\x00"

func mask_rcnn_inception_v2_cocoYmlBytes() ([]byte, error) {
	return bindataRead(
		_mask_rcnn_inception_v2_cocoYml,
		"Mask_RCNN_Inception_v2_COCO.yml",
	)
}

func mask_rcnn_inception_v2_cocoYml() (*asset, error) {
	bytes, err := mask_rcnn_inception_v2_cocoYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Mask_RCNN_Inception_v2_COCO.yml", size: 2206, mode: os.FileMode(420), modTime: time.Unix(1552458909, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ssd_mobilenet_v1_cocoYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4b\x6f\xe4\x36\x0c\xbe\xfb\x57\x10\xc8\x61\x77\x81\xc4\x9e\xd7\x26\x1e\x1f\x0a\x14\xb3\xe8\xa9\x4d\x80\x6e\xd1\xab\x40\xcb\xb4\xad\xc6\x96\x0c\x89\xce\x4c\xf2\xeb\x0b\x3d\xe6\x85\xa4\x40\x2e\xbd\x0c\xa4\xe1\x47\xe9\x23\xf9\x91\xb2\xc6\x91\x2a\xf8\xf9\xf3\x87\xf8\xc3\xd4\x6a\xa0\x47\x62\xf1\xb2\x14\xbb\xa7\xdd\x13\xdc\x80\xb7\x82\x69\xe1\xd5\xcc\x16\x46\xd3\xd0\x90\xb5\x16\x47\xda\x1b\xfb\x5c\x65\x00\xd1\xfb\x2f\xd2\xce\xd8\xdf\x06\xb3\x87\x1b\x38\xd9\xa1\x35\x16\xb8\xa7\xe4\x07\xf0\x42\xd6\x29\xa3\x2b\x58\xe6\xcb\x55\xbe\xb8\xc2\x26\x1b\x48\xa3\xd9\xa2\xd2\x9c\x5d\xa0\x3d\xf4\x08\x50\xba\x35\x76\x44\x8e\x6b\x70\x34\xa2\x66\x25\x4f\xf6\x68\xcd\xfc\x39\xa8\x34\xd9\x0a\x6e\xe0\xb4\x71\x30\x3b\x6a\x80\x0d\x4c\x64\x3d\x32\x72\x03\x7a\xc1\x61\x0e\x67\x66\x00\x38\x36\xf7\x1b\x1f\x1c\x40\x37\xcd\x15\x58\x54\x93\x35\xff\x90\xe4\x42\xa2\x1d\x87\x3b\x0e\xe1\xb6\x83\xd9\x57\x01\x7b\x27\xa7\x39\xc0\xe5\xe7\xe0\x5d\x80\x4f\x93\xbc\xdf\x0c\x54\x7d\xce\x33\xa1\x93\xef\x27\x98\x5d\x3a\x34\xe4\xa4\x55\x13\x87\x74\xfe\x92\xc1\x65\xc1\x9e\x6a\xef\x0f\x3f\x88\x49\x86\xa4\x86\x8c\xdc\xc2\xbe\x57\xb2\x07\xe5\x20\x94\x83\x1a\x30\x3a\x14\x33\x08\xe3\xeb\xce\x8c\xa3\xd1\xc9\xd9\xf9\x42\xec\x8c\x66\x3a\xf0\x37\x68\x90\xd1\x11\xe7\x19\x80\x73\x8d\x18\x83\xaa\x74\x54\x95\x34\xd2\x88\xd5\x62\x59\x8a\xc5\x52\xac\x4a\x68\xad\x19\x2f\xc9\x34\xd7\x2c\xe0\xcd\x98\x3c\xb3\xd4\x92\x25\x2d\xc9\xf9\x5a\x9e\x77\xa1\x8c\x38\xf9\xaa\x16\xb0\xa7\xda\x29\x26\xbf\x24\x96\x79\x0e\x31\xe6\x5a\xe9\xee\x4a\x83\x77\xd0\x33\x4f\xae\x2a\x8a\x4e\x71\x3f\xd7\xb9\x34\x63\x71\x4e\x5b\x11\x70\xae\xa8\x07\x53\x17\x23\x3a\x26\x5b\x58\x72\x84\x56\xf6\x85\x09\xd1\x8a\x13\xc9\xa2\x5b\x37\x46\x16\xa7\xbd\x08\xce\xc2\x93\x1e\x9b\x6c\x50\x92\xb4\xa3\x0a\x7e\x9d\x50\xf6\x04\xbf\xc7\xfd\x2d\xfc\x9d\x94\x1a\x5b\x20\xc1\x7c\x93\x9d\x79\x2a\x3d\xcd\x1c\xc2\x8d\x79\x88\xfb\x40\x9f\x5f\x27\xaa\x40\x8d\xd8\x91\x6f\x20\x65\x1d\x47\xb3\x87\xe2\xa0\xf8\x35\xe8\xe3\xaa\xe4\xfe\xe0\x88\x39\xfa\x5d\x98\x8f\x37\x5f\x1c\x15\x4e\x98\xd0\x37\x27\x93\x75\x51\xa2\x00\x34\xd0\x48\x9a\x45\xa4\x30\x2b\xcd\x65\xb2\x04\x2f\x31\xe0\xab\xef\xb7\x2f\xe1\x12\x11\x93\xfa\x25\x33\x33\x4f\x33\xfb\x33\xa2\x5f\x6d\x66\xdd\x28\xdd\xd5\xe6\x90\x7d\xc0\x33\xc2\x4f\x28\xa8\xcd\x01\x6e\x00\x3f\x62\x9c\xa0\x27\xa2\xd9\x7b\xd2\xd7\x94\xdb\xc1\x20\xaf\x57\xc1\x52\x9b\x03\xb9\x13\xe5\x73\x0d\xc3\xff\x5f\x62\x06\xac\xa9\xb1\x56\x83\x62\xf5\x21\xd4\x49\x63\x8f\x58\x39\xa0\x73\x1f\xa2\x92\x25\xc2\x5a\x42\x9e\x2d\x39\x31\xdb\xa1\x3a\x49\xd1\xad\x73\x1c\xf1\xcd\x68\xdc\xbb\x20\x48\xc7\xc6\x52\x1e\x7a\x3a\x37\xb6\x3b\xaa\xf2\xbd\x4e\xff\xb3\xc3\x1e\xc4\x72\x29\x96\x0f\xc5\x80\x35\x0d\x2e\xe7\x03\x5f\xdf\x2f\x7b\x92\xcf\x6e\x1e\x2b\xd8\x6c\x96\xa5\x2c\xbf\x37\x8b\x25\xdd\xcb\x72\xd5\xb6\xf7\xe5\x66\x5b\x97\xab\xf5\xf6\xe1\xfb\x76\xb3\x2e\xb3\x70\x95\xd7\xa2\x9b\x48\xaa\x56\x91\x4b\xaa\xec\x2c\x4e\x3d\xa0\x6e\x60\x4f\xaa\xeb\xd9\x81\x33\xb3\x95\xe4\x85\x5a\xa3\xa3\x10\x64\x06\x11\x27\x26\xe4\xfe\x7f\x0d\x39\x0d\x95\xa2\xb5\xe6\x8d\xb4\x50\x3a\x0d\x0a\x11\xee\xcf\xa7\x3a\x03\x50\x4e\xf8\x56\x56\x2f\x69\xee\xb6\x38\x38\xdf\x0f\xaa\x05\x47\x7c\xeb\x65\x15\xc7\xdc\x91\xbf\x9f\x80\x08\x7e\xc1\x06\x50\x43\xf2\x0e\xce\x37\x01\x79\x8e\xee\x32\x15\xf1\x8f\x70\x5c\x43\xda\x30\xf9\x75\xf2\x6a\xd5\x40\xe1\xe5\x74\x47\x25\xbf\xcf\xe4\x5e\x71\xaf\x22\x95\xf3\x95\xf1\xaa\x73\xe9\xe4\xb6\x69\xb7\x8b\x12\x1f\x1e\xb6\x8b\xfb\x95\xa4\xc5\x02\x6b\x2a\xdb\x6d\x49\x1b\x5c\x53\xbd\xcc\x90\xd9\xaa\x7a\xe6\x38\x3a\xe9\xc0\x16\x53\xed\xce\x96\x0c\xe0\x59\xe9\xa6\x82\xdd\xe3\x63\x0a\xc9\xef\x3d\x35\x4d\xb3\xc5\x01\x34\x71\x78\xa3\xbf\xee\x1e\x1f\x6f\xe1\x4f\xff\x93\xe7\xf9\x37\xdf\xd1\xfe\x6d\x50\xba\x13\x69\xe8\x57\x90\xbe\x1b\xd2\xfe\xf4\xdc\x86\x4f\x81\x04\xce\x00\x46\xd4\xaa\x25\xc7\x02\x67\xee\x8d\xad\x60\xd7\x93\xee\xb2\x7f\x03\x00\x00\xff\xff\x4c\xc1\xac\x7c\x8c\x08\x00\x00"

func ssd_mobilenet_v1_cocoYmlBytes() ([]byte, error) {
	return bindataRead(
		_ssd_mobilenet_v1_cocoYml,
		"SSD_MobileNet_v1_COCO.yml",
	)
}

func ssd_mobilenet_v1_cocoYml() (*asset, error) {
	bytes, err := ssd_mobilenet_v1_cocoYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "SSD_MobileNet_v1_COCO.yml", size: 2188, mode: os.FileMode(420), modTime: time.Unix(1552456206, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ssd_mobilenet_v2_cocoYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x41\x6f\xeb\x36\x0c\xbe\xfb\x57\x10\xe8\xa1\xef\x01\xad\x1d\x27\x69\x9a\xf8\x30\x60\xc8\xc3\x4e\x5b\x0b\xec\x0d\xbb\x0a\xb2\x4c\xdb\x5a\x6d\xd1\x90\xe8\x26\xed\xaf\x1f\x24\x39\x4e\xb2\xf6\xd0\xcb\x2e\x81\x14\x7e\x94\x3e\x92\x1f\x29\x1b\xd9\x63\x01\x3f\x7f\xfe\x10\x7f\x50\xa9\x3b\x7c\x42\x16\xaf\x4b\xb1\x7f\xde\x3f\xc3\x0d\x78\x2b\x50\x0d\x6f\x34\x5a\xe8\xa9\xc2\x2e\xa9\xad\xec\xf1\x40\xf6\xa5\x48\x00\xa2\xf7\x5f\x68\x1c\xd9\xdf\x3a\x3a\xc0\x0d\xcc\x76\xa8\xc9\x02\xb7\x38\xf9\x01\xbc\xa2\x75\x9a\x4c\x01\x79\x9a\x2f\xd3\xc5\x15\x76\xb2\x81\x22\xc3\x56\x6a\xc3\xc9\x05\xda\x43\x4f\x00\x6d\x6a\xb2\xbd\xe4\xb8\x06\x87\xbd\x34\xac\xd5\x6c\x8f\xd6\xc4\x9f\x23\xb5\x41\x5b\xc0\x0d\xcc\x1b\x07\xa3\xc3\x0a\x98\x60\x40\xeb\x91\x91\x1b\xe0\xab\xec\xc6\x70\x66\x02\x20\xfb\x6a\xb3\xf6\xc1\x01\x34\xc3\x58\x80\x95\x7a\xb0\xf4\x0f\x2a\xce\x94\xb4\x7d\x77\xcf\x21\xdc\xba\xa3\x43\x11\xb0\xf7\x6a\x18\x03\x5c\x7d\x0d\xde\x04\xf8\x30\xa8\xcd\xba\xc3\xe2\x6b\x9e\x13\x7a\xf2\xfd\x02\xb3\x4b\x87\x0a\x9d\xb2\x7a\xe0\x90\xce\x5f\x12\xb8\x2c\xd8\x73\xe9\xfd\xe1\x07\x32\xaa\x90\xd4\x90\x91\x3b\x38\xb4\x5a\xb5\xa0\x1d\x84\x72\x60\x05\x64\x42\x31\x83\x30\xbe\xed\xa9\xef\xc9\x4c\xce\xce\x17\x62\x4f\x86\xf1\xc8\xdf\xa1\x92\x2c\x1d\x72\x9a\x00\x38\x57\x89\x3e\xa8\xca\x44\x55\x29\x52\x24\x96\x8b\x7c\x2b\x16\x2b\xb1\xdc\x41\x6d\xa9\xbf\x24\x53\x5d\xb3\x80\x77\xa2\x34\xb1\x58\xa3\x45\xa3\xd0\xf9\x5a\x9e\x77\xa1\x8c\x72\xf0\x55\xcd\xe0\x80\xa5\xd3\x8c\x7e\x89\xac\xd2\x14\x62\xcc\xa5\x36\xcd\x95\x06\xef\xa1\x65\x1e\x5c\x91\x65\x8d\xe6\x76\x2c\x53\x45\x7d\x76\x4e\x5b\x16\x70\x2e\x2b\x3b\x2a\xb3\x5e\x3a\x46\x9b\x59\x74\x28\xad\x6a\x33\x0a\xd1\x8a\x99\x64\xd6\xac\x2a\x52\xd9\xbc\x17\xc1\x59\x78\xd2\x7d\x95\x74\x5a\xa1\x71\x58\xc0\xaf\x83\x54\x2d\xc2\xef\x71\x7f\x07\x7f\x4f\x4a\x8d\x2d\x30\xc1\x7c\x93\x9d\x79\x6a\x33\x8c\x1c\xc2\x8d\x79\x88\xfb\x40\x9f\xdf\x06\x2c\x40\xf7\xb2\x41\xdf\x40\xda\x3a\x8e\x66\x0f\x95\x9d\xe6\xb7\xa0\x8f\xab\x92\xfb\x83\x23\xe6\xe4\x77\x61\x3e\xdd\x7c\x71\x54\x38\x61\x90\xbe\x39\x19\xad\x8b\x12\x05\xc0\x0e\x7b\x34\x2c\x22\x85\x51\x1b\xde\x4e\x96\xe0\x25\x3a\xf9\xe6\xfb\xed\x36\x5c\x22\x62\x52\x6f\x13\x1a\x79\x18\xd9\x9f\x11\xfd\x4a\x1a\x4d\xa5\x4d\x53\xd2\x31\xf9\x84\x67\x84\xcf\x28\x28\xe9\x08\x37\x20\x3f\x63\x3c\x41\x67\xa2\xc9\x47\xd2\xd7\x94\xeb\x8e\x24\xaf\x96\xc1\x52\xd2\x11\xdd\x4c\xf9\x5c\xc3\xf0\xff\x6d\xcc\x80\xa5\x52\x96\xba\xd3\xac\x3f\x85\x3a\x45\xf6\x84\x55\x9d\x74\xee\x53\xd4\x64\x89\xb0\x1a\x25\x8f\x16\x9d\x18\x6d\x57\xcc\x52\x74\xab\x54\xf6\xf2\x9d\x8c\x3c\xb8\x20\x48\xc7\x64\x31\x0d\x3d\x9d\x92\x6d\x4e\xaa\xfc\xa8\xd3\xff\x74\x58\x3e\x77\xd8\xa3\xc8\x73\x91\x3f\x66\x9d\x2c\xb1\x73\x29\x1f\xf9\xfa\x7e\xd5\xa2\x7a\x71\x63\x5f\xc0\x7a\x9d\x6f\xd5\xf6\xa1\x5a\xe4\xb8\x51\xdb\x65\x5d\x6f\xb6\xeb\x5d\xb9\x5d\xae\x76\x8f\x0f\xbb\xf5\x6a\x9b\x84\xab\xbc\x16\xdd\x80\x4a\xd7\x1a\xdd\xa4\xca\xc6\xca\xa1\x05\x69\x2a\x38\xa0\x6e\x5a\x76\xe0\x68\xb4\x0a\xbd\x50\x4b\xe9\x30\x04\x99\x40\xc4\x89\x41\x72\xfb\x3f\x84\xfc\x61\xa8\x64\xb5\xa5\x77\x34\x42\x9b\x69\x50\x88\x70\x7f\x3a\x94\x09\x80\x76\xc2\xb7\xb2\x7e\x9d\xe6\x6e\x2d\x3b\xe7\xfb\x41\xd7\xe0\x90\xef\xbc\xac\xe2\x98\x3b\xf1\xf7\x13\x50\x82\x5f\x30\x81\x34\x30\x79\x07\xe7\x9b\x80\x3c\x47\x77\x99\x8a\xf8\x47\x38\xae\x42\x43\x8c\x7e\x3d\x79\xd5\xba\xc3\xf0\x72\xba\x93\x92\x3f\x66\xf2\xa0\xb9\xd5\x91\xca\xf9\xca\x78\xd5\xb9\x74\xab\x7c\x51\x97\xd5\x72\xb9\xd9\xe5\xe5\x6e\xbb\x56\x8f\x8b\x5d\xbd\xac\xca\x7a\xf3\xf0\xb0\xaa\x1f\xb6\x98\x48\x66\xab\xcb\x91\xe3\xe8\xc4\x23\x5b\x39\xd5\xee\x6c\x49\x00\x5e\xb4\xa9\x0a\xd8\x3f\x3d\x4d\x21\xf9\xbd\xa7\x66\x70\xb4\xb2\x03\x83\x1c\xde\xe8\x6f\xfb\xa7\xa7\x3b\xf8\xd3\xff\xa4\x69\xfa\xdd\x77\xb4\x7f\x1b\xb4\x69\xc4\x34\xf4\x0b\x98\xbe\x1b\xa6\xfd\xfc\xdc\x86\x4f\x81\x09\x9c\x00\xf4\xd2\xe8\x1a\x1d\x0b\x39\x72\x4b\xb6\x80\x7d\x8b\xa6\x49\xfe\x0d\x00\x00\xff\xff\x50\xfe\x08\xcf\x8c\x08\x00\x00"

func ssd_mobilenet_v2_cocoYmlBytes() ([]byte, error) {
	return bindataRead(
		_ssd_mobilenet_v2_cocoYml,
		"SSD_MobileNet_v2_COCO.yml",
	)
}

func ssd_mobilenet_v2_cocoYml() (*asset, error) {
	bytes, err := ssd_mobilenet_v2_cocoYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "SSD_MobileNet_v2_COCO.yml", size: 2188, mode: os.FileMode(420), modTime: time.Unix(1552456206, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ssd_mobilenet_v2_quantized_300x300_cocoYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\x0c\x90\xc3\xee\x02\x89\x3e\xfc\x91\x28\x3a\x14\x28\xbc\xe8\xa9\x75\xd0\x6e\xd1\x2b\x41\x51\x23\x89\x0d\x45\xaa\xe4\x28\x76\xf2\xeb\x0b\x92\xb2\x6c\x37\x39\xe4\xd2\x8b\x41\x7a\xde\x0c\xdf\xcc\xbc\x21\xa5\xf9\x80\x15\xfc\xf8\xf1\x9d\xfd\x66\x6a\xa9\x70\x8f\xc4\x5e\x56\xec\xf7\x89\x6b\x92\x6f\xd8\xb0\x75\x9e\x1f\xd7\x79\xce\x76\x4f\xbb\x27\xb8\x01\x8f\x07\xd3\xc2\xab\x99\x2c\x0c\xa6\x41\x95\xb4\x96\x0f\x78\x30\xf6\xb9\x4a\x00\x62\xbc\x3f\x51\x3b\x63\x7f\x51\xe6\x00\x37\xb0\xd8\xa1\x35\x16\xa8\xc7\xd9\x0f\xe0\x05\xad\x93\x46\x57\x50\xa4\xc5\x2a\xcd\xaf\xb0\xb3\x0d\x84\xd1\x64\xb9\xd4\x94\x5c\xa0\x3d\xf4\x04\x90\xba\x35\x76\xe0\x14\xd7\xe0\x70\xf0\xd4\xc5\x62\x8f\xd6\xc4\xc7\xe1\x52\xa3\xad\xe0\x06\x96\x8d\x83\xc9\x61\x03\x64\x60\x44\xeb\x91\x91\x1b\xe0\x0b\x57\x53\x88\x99\x00\xf0\xa1\xb9\xdf\xf8\xe4\x00\xba\x71\xaa\xc0\x72\x39\x5a\xf3\x37\x0a\xca\x04\xb7\x83\xba\xa3\x90\x6e\xab\xcc\xa1\x0a\xd8\x3b\x31\x4e\x01\x2e\x3e\x07\xef\x02\x7c\x1c\xc5\xfd\x46\x61\xf5\x39\xcf\x19\x3d\xfb\x7e\x82\xd9\xa5\x43\x83\x4e\x58\x39\x52\x28\xe7\x4f\x09\x5c\x36\xec\xa9\xf6\xfe\xf0\x1d\x09\x45\x28\x6a\xa8\xc8\x2d\x1c\x7a\x29\x7a\x90\x0e\x42\x3b\xb0\x01\xa3\x43\x33\x83\x30\xbe\xee\xcc\x30\x18\x3d\x3b\x3b\xdf\x88\x9d\xd1\x84\x47\xfa\x06\x0d\x27\xee\x90\xd2\x04\xc0\xb9\x86\x0d\x41\x67\x3a\xea\xec\x9f\x77\x3a\x13\x46\x18\xb6\xca\x8b\x47\x96\x17\x2c\x5f\x43\x6b\xcd\x70\x49\xaf\xb9\xe6\x05\x6f\xc6\xa4\x89\xc5\x16\x2d\x6a\x81\xce\x77\xf7\xbc\x0b\x8d\xe5\xa3\xef\x73\x06\x07\xac\x9d\x24\xf4\x4b\x24\x91\xa6\x10\xab\x50\x4b\xdd\x5d\xa9\xf2\x0e\x7a\xa2\xd1\x55\x59\xd6\x49\xea\xa7\x3a\x15\x66\xc8\xce\x85\xcc\x02\xce\x65\xb5\x32\x75\x36\x70\x47\x68\x33\x8b\x0e\xb9\x15\x7d\x66\x42\xfe\x6c\x21\x99\x75\xeb\xc6\x88\x6c\xd9\xb3\xe0\xcc\x3c\xe9\xa1\x49\x94\x14\xa8\x1d\x56\xf0\xf3\xc8\x45\x8f\xf0\x6b\xdc\xdf\xc2\x5f\xb3\x76\xe3\x50\xcc\x30\x3f\x76\x67\x9e\x52\x8f\x13\x85\x74\x63\x1d\xe2\x3e\xd0\xa7\xd7\x11\x2b\x90\x03\xef\xd0\x8f\x94\xb4\x8e\xa2\xd9\x43\xb9\x92\xf4\x1a\x14\x73\x25\x02\x1f\x38\x62\x4e\x7e\x17\xe6\xd3\xc9\x17\xa1\x42\x84\x91\xfb\x71\x25\xb4\x2e\x8a\x16\x00\x15\x0e\xa8\x89\x45\x0a\x93\xd4\x54\xce\x96\xe0\xc5\x14\x7f\xf5\x13\xf8\x25\x1c\xc2\x62\x51\xbf\x24\x66\xa2\x71\x22\x1f\x23\xfa\xd5\x66\xd2\x8d\xd4\x5d\x6d\x8e\xc9\x07\x3c\x23\x7c\x41\x41\x6d\x8e\x70\x03\xfc\x23\xc6\x33\x74\x21\x9a\xbc\x27\x7d\x4d\xb9\x55\x86\xd3\x7a\x15\x2c\xb5\x39\xa2\x5b\x28\x9f\x7b\x18\xfe\xff\x12\x2b\x60\x4d\xcd\x6b\xa9\x24\xc9\x0f\xa1\x4e\x18\x7b\xc2\x0a\xc5\x9d\xfb\x10\x35\x5b\x22\xac\x45\x4e\x93\x45\xc7\x26\xab\xaa\x45\x8a\x6e\x9d\xf2\x81\xbf\x19\xcd\x0f\x2e\x08\xd2\x91\xb1\x98\x86\x29\x4f\x8d\xed\x4e\xaa\x7c\xaf\xd3\xff\xcc\x5c\xb1\x4c\xd8\x03\x2b\x0a\x56\x3c\x64\x8a\xd7\xa8\x5c\x4a\x47\xba\x3e\x5f\xf4\x28\x9e\xdd\x34\x54\xb0\xd9\x14\xa5\x28\xb7\x4d\x5e\xe0\xbd\x28\x57\x6d\x7b\x5f\x6e\x1e\xeb\x72\xb5\x7e\x7c\xd8\x3e\x6e\xd6\x65\x12\x8e\xf2\x5a\x74\x23\x0a\xd9\x4a\x74\xb3\x2a\x3b\xcb\xc7\x1e\xb8\x6e\xe0\x80\xb2\xeb\xc9\x81\x33\x93\x15\xe8\x85\x5a\x73\x87\x21\xc9\x04\x22\x8e\x8d\x9c\xfa\xff\x21\xe5\x4f\x5c\x33\x19\xb5\x4a\x12\xb2\xc0\x23\x1d\xeb\x04\x40\x3a\xe6\x47\x5a\xbe\xcc\x37\x72\xcb\x95\xf3\x73\x21\x5b\x70\x48\xb7\x5e\x5e\xf1\x02\x3c\xe5\xe1\xef\x46\x0e\x7e\x41\x06\xb8\x86\xd9\x3b\x38\xdf\x04\xe4\x39\xcb\xcb\x92\xc4\x3f\x42\xb8\x06\xb5\x21\xf4\xeb\xd9\xab\x95\x0a\xc3\x9b\xea\x4e\x8a\x7e\x5f\xd1\x83\xa4\x5e\x46\x2a\xe7\x23\xe3\x51\xe7\x16\xe6\xe5\xa6\x2c\x37\x1b\x6c\xb7\xbc\xad\xc5\x76\xbd\x2a\x1b\xc4\xba\xad\x8b\xb2\xd9\x96\xdb\xfc\x31\xe1\x44\x56\xd6\x13\xc5\x2b\x14\x8f\x64\xf9\xdc\xc3\xb3\x25\x01\x78\x96\xba\xa9\x60\xb7\xdf\xcf\x29\xf9\xbd\xa7\xa6\x71\xb2\x5c\x81\x46\x0a\xaf\xf7\xd7\xdd\x7e\x7f\x0b\x7f\xf8\x9f\x34\x4d\xbf\xf9\xc9\xf6\xaf\x86\xd4\x1d\x9b\x9f\x83\x0a\xe6\x2f\x8a\x79\xbf\x3c\xc4\xe1\x23\x61\x06\x27\x00\x03\xd7\xb2\x45\x47\x8c\x4f\xd4\x1b\x5b\xc1\xae\x47\xdd\x25\xbd\x6c\x1a\xf4\xf7\x81\x9d\x30\xf9\x37\x00\x00\xff\xff\xc3\x13\xbd\x2f\xc5\x08\x00\x00"

func ssd_mobilenet_v2_quantized_300x300_cocoYmlBytes() ([]byte, error) {
	return bindataRead(
		_ssd_mobilenet_v2_quantized_300x300_cocoYml,
		"SSD_MobileNet_v2_Quantized_300x300_COCO.yml",
	)
}

func ssd_mobilenet_v2_quantized_300x300_cocoYml() (*asset, error) {
	bytes, err := ssd_mobilenet_v2_quantized_300x300_cocoYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "SSD_MobileNet_v2_Quantized_300x300_COCO.yml", size: 2245, mode: os.FileMode(420), modTime: time.Unix(1552456868, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ssd_resnet50_fpn_cocoYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4d\x6f\xdb\x38\x10\xbd\xeb\x57\x0c\x90\x43\x5b\x20\x95\xfc\x21\x3b\xaa\x0e\x0b\x2c\x5c\xf4\xb4\x70\x16\xed\x62\xaf\x04\x45\x8d\x24\x6e\x24\x8e\x40\x8e\x62\x27\xbf\x7e\x41\x52\xfe\x42\x72\xc8\xa1\x17\x83\xf4\xbc\x47\x3e\xce\xbc\x21\x65\xe4\x80\x25\xfc\xfa\xf5\x5d\xfc\x44\xb7\x47\xde\x2c\xc4\x8f\xbf\xf7\x62\xf7\xb8\x7b\x84\x3b\xf0\x51\xa0\x06\x5e\x68\xb2\x30\x50\x8d\x7d\xd2\x58\x39\xe0\x81\xec\x53\x99\x00\x44\xf6\x3f\x68\x1c\xd9\x1f\x3d\x1d\xe0\x0e\xce\x71\x68\xc8\x02\x77\x38\xf3\x00\x9e\xd1\x3a\x4d\xa6\x84\x65\xba\x5c\xa5\x8b\x1b\xec\x1c\x03\x45\x86\xad\xd4\x86\x93\x2b\xb4\x87\x9e\x00\xda\x34\x64\x07\xc9\x71\x0c\x0e\x07\x69\x58\xab\x73\x3c\x46\x13\xbf\x8e\xd4\x06\x6d\x09\x77\x70\x9e\x38\x98\x1c\xd6\xc0\x04\x23\x5a\x8f\x8c\xda\x00\x9f\x65\x3f\x85\x35\x13\x00\x39\xd4\xdb\xdc\x1f\x0e\xa0\x1d\xa7\x12\xac\xd4\xa3\xa5\xff\x50\x71\xa6\xa4\x1d\xfa\xaf\x1c\x8e\xdb\xf4\x74\x28\x03\xf6\xab\x1a\xa7\x00\x57\x1f\x83\xb7\x01\x3e\x8e\x6a\x9b\xf7\x58\x7e\x8c\x39\xa3\x67\xee\x07\x94\x5d\x13\x6a\x74\xca\xea\x91\x43\x3a\xff\x48\xe0\xba\x60\x8f\x95\xe7\xc3\x77\x64\x54\x21\xa9\x21\x23\xf7\x70\xe8\xb4\xea\x40\x3b\x08\xe5\xc0\x1a\xc8\x84\x62\x06\x63\x7c\xde\xd1\x30\x90\x99\xc9\xce\x17\x62\x47\x86\xf1\xc8\x5f\xa0\x96\x2c\x1d\x72\x9a\x00\x38\x57\x0b\x8b\xce\x04\x57\x3d\x2f\x45\x33\x1a\xe1\x3a\x69\xb1\x16\x15\x1d\xc5\x68\xb1\xd6\x8a\xc9\x8a\x6d\xbe\x38\x6e\xf3\x85\x50\xa4\x68\x99\x0b\xf7\x62\x94\x58\x2d\x96\x85\x58\x3c\x88\xc5\x1a\x1a\x4b\xc3\xb5\xe6\xfa\x56\x2c\xbc\x12\xa5\x89\xc5\x06\x2d\x1a\x85\xce\x97\xfc\x32\x0b\xd5\x96\xa3\x2f\x7e\x06\x07\xac\x9c\x66\xf4\x43\x64\x95\xa6\x10\x53\x53\x69\xd3\xde\x58\xf5\x2b\x74\xcc\xa3\x2b\xb3\xac\xd5\xdc\x4d\x55\xaa\x68\xc8\x2e\xd9\xcd\x02\xce\x65\x55\x4f\x55\x36\x48\xc7\x68\x33\x8b\x0e\xa5\x55\x5d\x46\x21\x29\xe2\x2c\x32\x6b\xd7\x35\xa9\xec\x3c\x17\x81\x2c\xbc\xe8\xa1\x4e\x7a\xad\xd0\x38\x2c\xe1\xcf\x51\xaa\x0e\xe1\xaf\x38\xbf\x87\x7f\x67\x43\xc7\x4e\x99\x61\xbe\x17\x2f\x3a\xb5\x19\x27\x0e\xc7\x8d\x79\x88\xf3\x20\x9f\x5f\x46\x2c\x41\x0f\xb2\x45\xdf\x67\xda\x3a\x8e\x61\x0f\x95\xbd\xe6\x97\x60\xa3\x1b\x67\xf8\x85\x23\xe6\xc4\xbb\x0a\x9f\x76\xbe\x5a\x2a\xac\x30\x4a\xdf\xc3\x8c\xd6\x45\x27\x03\x60\x8f\x03\x1a\x16\x51\xc2\xa4\x0d\x17\x73\x24\xb0\x44\x2f\x5f\x7c\x5b\x7e\x0a\x9b\x88\x98\xd4\x4f\x09\x4d\x3c\x4e\xec\xd7\x88\xbc\x8a\x26\x53\x6b\xd3\x56\x74\x4c\xde\xd1\x19\xe1\x67\x14\x54\x74\x84\x3b\x90\xef\x29\x9e\xa1\x67\xa1\xc9\x5b\xd1\xb7\x92\x9b\x9e\x24\xaf\x57\x21\x52\xd1\x11\xdd\x59\xf2\xa5\x86\xe1\xff\x4f\x31\x03\x96\x2a\x59\xe9\x5e\xb3\x7e\x17\xea\x14\xd9\x13\x56\xf5\xd2\xb9\x77\x51\x73\x24\xc2\x1a\x94\x3c\x59\x74\x62\xb2\x7d\x79\xb6\xa2\x5b\xa7\x72\x90\xaf\x64\xe4\xc1\x05\x43\x3a\x26\x8b\x69\x68\xfd\x94\x6c\x7b\x72\xe5\x5b\x9f\xfa\x46\x1c\xa8\xd2\x3d\x1a\x64\xdf\x89\xbe\xd1\x7c\x87\x3d\x88\xe5\x52\x2c\x1f\xb2\x5e\x56\xd8\xbb\x94\x8f\x7c\xbb\xbf\xea\x50\x3d\xb9\x69\x28\x21\xcf\x97\x85\x2a\x36\xf5\x62\x89\x5b\x55\xac\x9a\x66\x5b\xe4\xdf\xaa\x62\xb5\xfe\xf6\xb0\xf9\x96\xaf\x8b\x24\x6c\xe5\xbd\xe8\x46\x54\xba\xd1\xe8\x66\x57\xb6\x56\x8e\x1d\x48\x53\xc3\x01\x75\xdb\xb1\x03\x47\x93\x55\xe8\x8d\x5a\x49\x87\xe1\x90\x09\x44\x9c\x18\x25\x77\xbf\xeb\xc8\xbf\xe1\xee\xc9\x1a\x4b\xaf\x68\x84\x36\xf3\x7d\x22\x82\xcc\x74\xac\x12\x00\xed\x84\xef\x78\xfd\x3c\xdf\xe2\x8d\xec\x9d\x6f\x1b\xdd\x80\x43\xbe\xf7\xee\x8b\x97\xe6\xe9\x98\xfe\x3e\x95\xe0\x07\x4c\x20\x0d\xcc\xec\x40\xbe\x0b\xc8\x4b\x12\xae\x33\x16\xff\x08\xcb\xd5\x68\x88\xd1\x8f\x67\x56\xa3\x7b\x0c\xef\xb0\x3b\x19\xfe\x6d\xc2\x0f\x9a\x3b\x1d\xa5\x5c\xb6\x8c\x5b\x5d\x2a\x5c\x54\x5b\xac\xb1\x5a\xe6\xeb\xcd\x76\xdb\x14\xeb\x05\xae\x37\x0f\xdb\x4d\xbe\x2e\xaa\x7c\xb3\x6a\x9a\x44\x32\x5b\x5d\x4d\x1c\x6f\x58\x3c\xb2\x95\x73\x89\x2f\x91\x04\xe0\x49\x9b\xba\x84\xdd\x7e\x3f\x1f\xc9\xcf\xbd\x34\x83\x93\x95\x3d\x18\xe4\xf0\xe2\x7f\xde\xed\xf7\xf7\xf0\xd3\xff\xa4\x69\xfa\xc5\x37\xbe\x7f\x69\xb4\x69\xc5\xfc\x84\x94\x30\x7f\x85\xcc\xf3\xf3\xe3\x1d\x3e\x2c\x66\x70\x02\x30\x48\xa3\x1b\x74\x2c\xe4\xc4\x1d\xd9\x12\x76\x1d\x9a\x36\xf9\x3f\x00\x00\xff\xff\x86\xe3\xbe\xb4\xda\x08\x00\x00"

func ssd_resnet50_fpn_cocoYmlBytes() ([]byte, error) {
	return bindataRead(
		_ssd_resnet50_fpn_cocoYml,
		"SSD_ResNet50_FPN_COCO.yml",
	)
}

func ssd_resnet50_fpn_cocoYml() (*asset, error) {
	bytes, err := ssd_resnet50_fpn_cocoYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "SSD_ResNet50_FPN_COCO.yml", size: 2266, mode: os.FileMode(420), modTime: time.Unix(1552457445, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Faster_RCNN_ResNet50_COCO.yml": faster_rcnn_resnet50_cocoYml,
	"Mask_RCNN_Inception_v2_COCO.yml": mask_rcnn_inception_v2_cocoYml,
	"SSD_MobileNet_v1_COCO.yml": ssd_mobilenet_v1_cocoYml,
	"SSD_MobileNet_v2_COCO.yml": ssd_mobilenet_v2_cocoYml,
	"SSD_MobileNet_v2_Quantized_300x300_COCO.yml": ssd_mobilenet_v2_quantized_300x300_cocoYml,
	"SSD_ResNet50_FPN_COCO.yml": ssd_resnet50_fpn_cocoYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"Faster_RCNN_ResNet50_COCO.yml": &bintree{faster_rcnn_resnet50_cocoYml, map[string]*bintree{}},
	"Mask_RCNN_Inception_v2_COCO.yml": &bintree{mask_rcnn_inception_v2_cocoYml, map[string]*bintree{}},
	"SSD_MobileNet_v1_COCO.yml": &bintree{ssd_mobilenet_v1_cocoYml, map[string]*bintree{}},
	"SSD_MobileNet_v2_COCO.yml": &bintree{ssd_mobilenet_v2_cocoYml, map[string]*bintree{}},
	"SSD_MobileNet_v2_Quantized_300x300_COCO.yml": &bintree{ssd_mobilenet_v2_quantized_300x300_cocoYml, map[string]*bintree{}},
	"SSD_ResNet50_FPN_COCO.yml": &bintree{ssd_resnet50_fpn_cocoYml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

