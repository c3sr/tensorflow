// Code generated by protoc-gen-go. DO NOT EDIT.
// source: replay_log.proto

package tensorflow

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Records the creation of a new replay session.  We record the device listing
// here to capture the state of the cluster.
type NewReplaySession struct {
	Devices              *ListDevicesResponse `protobuf:"bytes,1,opt,name=devices,proto3" json:"devices,omitempty"`
	SessionHandle        string               `protobuf:"bytes,2,opt,name=session_handle,json=sessionHandle,proto3" json:"session_handle,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *NewReplaySession) Reset()         { *m = NewReplaySession{} }
func (m *NewReplaySession) String() string { return proto.CompactTextString(m) }
func (*NewReplaySession) ProtoMessage()    {}
func (*NewReplaySession) Descriptor() ([]byte, []int) {
	return fileDescriptor_90d5038285884e03, []int{0}
}

func (m *NewReplaySession) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewReplaySession.Unmarshal(m, b)
}
func (m *NewReplaySession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewReplaySession.Marshal(b, m, deterministic)
}
func (m *NewReplaySession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewReplaySession.Merge(m, src)
}
func (m *NewReplaySession) XXX_Size() int {
	return xxx_messageInfo_NewReplaySession.Size(m)
}
func (m *NewReplaySession) XXX_DiscardUnknown() {
	xxx_messageInfo_NewReplaySession.DiscardUnknown(m)
}

var xxx_messageInfo_NewReplaySession proto.InternalMessageInfo

func (m *NewReplaySession) GetDevices() *ListDevicesResponse {
	if m != nil {
		return m.Devices
	}
	return nil
}

func (m *NewReplaySession) GetSessionHandle() string {
	if m != nil {
		return m.SessionHandle
	}
	return ""
}

type ReplayOp struct {
	StartTimeUs float64 `protobuf:"fixed64,31,opt,name=start_time_us,json=startTimeUs,proto3" json:"start_time_us,omitempty"`
	EndTimeUs   float64 `protobuf:"fixed64,32,opt,name=end_time_us,json=endTimeUs,proto3" json:"end_time_us,omitempty"`
	// Types that are valid to be assigned to Op:
	//	*ReplayOp_CreateSession
	//	*ReplayOp_ExtendSession
	//	*ReplayOp_PartialRunSetup
	//	*ReplayOp_RunStep
	//	*ReplayOp_CloseSession
	//	*ReplayOp_ListDevices
	//	*ReplayOp_ResetRequest
	//	*ReplayOp_MakeCallable
	//	*ReplayOp_RunCallable
	//	*ReplayOp_ReleaseCallable
	//	*ReplayOp_NewReplaySession
	Op isReplayOp_Op `protobuf_oneof:"op"`
	// Types that are valid to be assigned to Response:
	//	*ReplayOp_CreateSessionResponse
	//	*ReplayOp_ExtendSessionResponse
	//	*ReplayOp_PartialRunSetupResponse
	//	*ReplayOp_RunStepResponse
	//	*ReplayOp_CloseSessionResponse
	//	*ReplayOp_ListDevicesResponse
	//	*ReplayOp_ResetRequestResponse
	//	*ReplayOp_MakeCallableResponse
	//	*ReplayOp_RunCallableResponse
	//	*ReplayOp_ReleaseCallableResponse
	Response             isReplayOp_Response `protobuf_oneof:"response"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ReplayOp) Reset()         { *m = ReplayOp{} }
func (m *ReplayOp) String() string { return proto.CompactTextString(m) }
func (*ReplayOp) ProtoMessage()    {}
func (*ReplayOp) Descriptor() ([]byte, []int) {
	return fileDescriptor_90d5038285884e03, []int{1}
}

func (m *ReplayOp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplayOp.Unmarshal(m, b)
}
func (m *ReplayOp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplayOp.Marshal(b, m, deterministic)
}
func (m *ReplayOp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplayOp.Merge(m, src)
}
func (m *ReplayOp) XXX_Size() int {
	return xxx_messageInfo_ReplayOp.Size(m)
}
func (m *ReplayOp) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplayOp.DiscardUnknown(m)
}

var xxx_messageInfo_ReplayOp proto.InternalMessageInfo

func (m *ReplayOp) GetStartTimeUs() float64 {
	if m != nil {
		return m.StartTimeUs
	}
	return 0
}

func (m *ReplayOp) GetEndTimeUs() float64 {
	if m != nil {
		return m.EndTimeUs
	}
	return 0
}

type isReplayOp_Op interface {
	isReplayOp_Op()
}

type ReplayOp_CreateSession struct {
	CreateSession *CreateSessionRequest `protobuf:"bytes,1,opt,name=create_session,json=createSession,proto3,oneof"`
}

type ReplayOp_ExtendSession struct {
	ExtendSession *ExtendSessionRequest `protobuf:"bytes,2,opt,name=extend_session,json=extendSession,proto3,oneof"`
}

type ReplayOp_PartialRunSetup struct {
	PartialRunSetup *PartialRunSetupRequest `protobuf:"bytes,3,opt,name=partial_run_setup,json=partialRunSetup,proto3,oneof"`
}

type ReplayOp_RunStep struct {
	RunStep *RunStepRequest `protobuf:"bytes,4,opt,name=run_step,json=runStep,proto3,oneof"`
}

type ReplayOp_CloseSession struct {
	CloseSession *CloseSessionRequest `protobuf:"bytes,5,opt,name=close_session,json=closeSession,proto3,oneof"`
}

type ReplayOp_ListDevices struct {
	ListDevices *ListDevicesRequest `protobuf:"bytes,6,opt,name=list_devices,json=listDevices,proto3,oneof"`
}

type ReplayOp_ResetRequest struct {
	ResetRequest *ResetRequest `protobuf:"bytes,7,opt,name=reset_request,json=resetRequest,proto3,oneof"`
}

type ReplayOp_MakeCallable struct {
	MakeCallable *MakeCallableRequest `protobuf:"bytes,8,opt,name=make_callable,json=makeCallable,proto3,oneof"`
}

type ReplayOp_RunCallable struct {
	RunCallable *RunCallableRequest `protobuf:"bytes,9,opt,name=run_callable,json=runCallable,proto3,oneof"`
}

type ReplayOp_ReleaseCallable struct {
	ReleaseCallable *ReleaseCallableRequest `protobuf:"bytes,10,opt,name=release_callable,json=releaseCallable,proto3,oneof"`
}

type ReplayOp_NewReplaySession struct {
	NewReplaySession *NewReplaySession `protobuf:"bytes,11,opt,name=new_replay_session,json=newReplaySession,proto3,oneof"`
}

func (*ReplayOp_CreateSession) isReplayOp_Op() {}

func (*ReplayOp_ExtendSession) isReplayOp_Op() {}

func (*ReplayOp_PartialRunSetup) isReplayOp_Op() {}

func (*ReplayOp_RunStep) isReplayOp_Op() {}

func (*ReplayOp_CloseSession) isReplayOp_Op() {}

func (*ReplayOp_ListDevices) isReplayOp_Op() {}

func (*ReplayOp_ResetRequest) isReplayOp_Op() {}

func (*ReplayOp_MakeCallable) isReplayOp_Op() {}

func (*ReplayOp_RunCallable) isReplayOp_Op() {}

func (*ReplayOp_ReleaseCallable) isReplayOp_Op() {}

func (*ReplayOp_NewReplaySession) isReplayOp_Op() {}

func (m *ReplayOp) GetOp() isReplayOp_Op {
	if m != nil {
		return m.Op
	}
	return nil
}

func (m *ReplayOp) GetCreateSession() *CreateSessionRequest {
	if x, ok := m.GetOp().(*ReplayOp_CreateSession); ok {
		return x.CreateSession
	}
	return nil
}

func (m *ReplayOp) GetExtendSession() *ExtendSessionRequest {
	if x, ok := m.GetOp().(*ReplayOp_ExtendSession); ok {
		return x.ExtendSession
	}
	return nil
}

func (m *ReplayOp) GetPartialRunSetup() *PartialRunSetupRequest {
	if x, ok := m.GetOp().(*ReplayOp_PartialRunSetup); ok {
		return x.PartialRunSetup
	}
	return nil
}

func (m *ReplayOp) GetRunStep() *RunStepRequest {
	if x, ok := m.GetOp().(*ReplayOp_RunStep); ok {
		return x.RunStep
	}
	return nil
}

func (m *ReplayOp) GetCloseSession() *CloseSessionRequest {
	if x, ok := m.GetOp().(*ReplayOp_CloseSession); ok {
		return x.CloseSession
	}
	return nil
}

func (m *ReplayOp) GetListDevices() *ListDevicesRequest {
	if x, ok := m.GetOp().(*ReplayOp_ListDevices); ok {
		return x.ListDevices
	}
	return nil
}

func (m *ReplayOp) GetResetRequest() *ResetRequest {
	if x, ok := m.GetOp().(*ReplayOp_ResetRequest); ok {
		return x.ResetRequest
	}
	return nil
}

func (m *ReplayOp) GetMakeCallable() *MakeCallableRequest {
	if x, ok := m.GetOp().(*ReplayOp_MakeCallable); ok {
		return x.MakeCallable
	}
	return nil
}

func (m *ReplayOp) GetRunCallable() *RunCallableRequest {
	if x, ok := m.GetOp().(*ReplayOp_RunCallable); ok {
		return x.RunCallable
	}
	return nil
}

func (m *ReplayOp) GetReleaseCallable() *ReleaseCallableRequest {
	if x, ok := m.GetOp().(*ReplayOp_ReleaseCallable); ok {
		return x.ReleaseCallable
	}
	return nil
}

func (m *ReplayOp) GetNewReplaySession() *NewReplaySession {
	if x, ok := m.GetOp().(*ReplayOp_NewReplaySession); ok {
		return x.NewReplaySession
	}
	return nil
}

type isReplayOp_Response interface {
	isReplayOp_Response()
}

type ReplayOp_CreateSessionResponse struct {
	CreateSessionResponse *CreateSessionResponse `protobuf:"bytes,21,opt,name=create_session_response,json=createSessionResponse,proto3,oneof"`
}

type ReplayOp_ExtendSessionResponse struct {
	ExtendSessionResponse *ExtendSessionResponse `protobuf:"bytes,22,opt,name=extend_session_response,json=extendSessionResponse,proto3,oneof"`
}

type ReplayOp_PartialRunSetupResponse struct {
	PartialRunSetupResponse *PartialRunSetupResponse `protobuf:"bytes,23,opt,name=partial_run_setup_response,json=partialRunSetupResponse,proto3,oneof"`
}

type ReplayOp_RunStepResponse struct {
	RunStepResponse *RunStepResponse `protobuf:"bytes,24,opt,name=run_step_response,json=runStepResponse,proto3,oneof"`
}

type ReplayOp_CloseSessionResponse struct {
	CloseSessionResponse *CloseSessionResponse `protobuf:"bytes,25,opt,name=close_session_response,json=closeSessionResponse,proto3,oneof"`
}

type ReplayOp_ListDevicesResponse struct {
	ListDevicesResponse *ListDevicesResponse `protobuf:"bytes,26,opt,name=list_devices_response,json=listDevicesResponse,proto3,oneof"`
}

type ReplayOp_ResetRequestResponse struct {
	ResetRequestResponse *ResetResponse `protobuf:"bytes,27,opt,name=reset_request_response,json=resetRequestResponse,proto3,oneof"`
}

type ReplayOp_MakeCallableResponse struct {
	MakeCallableResponse *MakeCallableResponse `protobuf:"bytes,28,opt,name=make_callable_response,json=makeCallableResponse,proto3,oneof"`
}

type ReplayOp_RunCallableResponse struct {
	RunCallableResponse *RunCallableResponse `protobuf:"bytes,29,opt,name=run_callable_response,json=runCallableResponse,proto3,oneof"`
}

type ReplayOp_ReleaseCallableResponse struct {
	ReleaseCallableResponse *ReleaseCallableResponse `protobuf:"bytes,30,opt,name=release_callable_response,json=releaseCallableResponse,proto3,oneof"`
}

func (*ReplayOp_CreateSessionResponse) isReplayOp_Response() {}

func (*ReplayOp_ExtendSessionResponse) isReplayOp_Response() {}

func (*ReplayOp_PartialRunSetupResponse) isReplayOp_Response() {}

func (*ReplayOp_RunStepResponse) isReplayOp_Response() {}

func (*ReplayOp_CloseSessionResponse) isReplayOp_Response() {}

func (*ReplayOp_ListDevicesResponse) isReplayOp_Response() {}

func (*ReplayOp_ResetRequestResponse) isReplayOp_Response() {}

func (*ReplayOp_MakeCallableResponse) isReplayOp_Response() {}

func (*ReplayOp_RunCallableResponse) isReplayOp_Response() {}

func (*ReplayOp_ReleaseCallableResponse) isReplayOp_Response() {}

func (m *ReplayOp) GetResponse() isReplayOp_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *ReplayOp) GetCreateSessionResponse() *CreateSessionResponse {
	if x, ok := m.GetResponse().(*ReplayOp_CreateSessionResponse); ok {
		return x.CreateSessionResponse
	}
	return nil
}

func (m *ReplayOp) GetExtendSessionResponse() *ExtendSessionResponse {
	if x, ok := m.GetResponse().(*ReplayOp_ExtendSessionResponse); ok {
		return x.ExtendSessionResponse
	}
	return nil
}

func (m *ReplayOp) GetPartialRunSetupResponse() *PartialRunSetupResponse {
	if x, ok := m.GetResponse().(*ReplayOp_PartialRunSetupResponse); ok {
		return x.PartialRunSetupResponse
	}
	return nil
}

func (m *ReplayOp) GetRunStepResponse() *RunStepResponse {
	if x, ok := m.GetResponse().(*ReplayOp_RunStepResponse); ok {
		return x.RunStepResponse
	}
	return nil
}

func (m *ReplayOp) GetCloseSessionResponse() *CloseSessionResponse {
	if x, ok := m.GetResponse().(*ReplayOp_CloseSessionResponse); ok {
		return x.CloseSessionResponse
	}
	return nil
}

func (m *ReplayOp) GetListDevicesResponse() *ListDevicesResponse {
	if x, ok := m.GetResponse().(*ReplayOp_ListDevicesResponse); ok {
		return x.ListDevicesResponse
	}
	return nil
}

func (m *ReplayOp) GetResetRequestResponse() *ResetResponse {
	if x, ok := m.GetResponse().(*ReplayOp_ResetRequestResponse); ok {
		return x.ResetRequestResponse
	}
	return nil
}

func (m *ReplayOp) GetMakeCallableResponse() *MakeCallableResponse {
	if x, ok := m.GetResponse().(*ReplayOp_MakeCallableResponse); ok {
		return x.MakeCallableResponse
	}
	return nil
}

func (m *ReplayOp) GetRunCallableResponse() *RunCallableResponse {
	if x, ok := m.GetResponse().(*ReplayOp_RunCallableResponse); ok {
		return x.RunCallableResponse
	}
	return nil
}

func (m *ReplayOp) GetReleaseCallableResponse() *ReleaseCallableResponse {
	if x, ok := m.GetResponse().(*ReplayOp_ReleaseCallableResponse); ok {
		return x.ReleaseCallableResponse
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ReplayOp) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ReplayOp_OneofMarshaler, _ReplayOp_OneofUnmarshaler, _ReplayOp_OneofSizer, []interface{}{
		(*ReplayOp_CreateSession)(nil),
		(*ReplayOp_ExtendSession)(nil),
		(*ReplayOp_PartialRunSetup)(nil),
		(*ReplayOp_RunStep)(nil),
		(*ReplayOp_CloseSession)(nil),
		(*ReplayOp_ListDevices)(nil),
		(*ReplayOp_ResetRequest)(nil),
		(*ReplayOp_MakeCallable)(nil),
		(*ReplayOp_RunCallable)(nil),
		(*ReplayOp_ReleaseCallable)(nil),
		(*ReplayOp_NewReplaySession)(nil),
		(*ReplayOp_CreateSessionResponse)(nil),
		(*ReplayOp_ExtendSessionResponse)(nil),
		(*ReplayOp_PartialRunSetupResponse)(nil),
		(*ReplayOp_RunStepResponse)(nil),
		(*ReplayOp_CloseSessionResponse)(nil),
		(*ReplayOp_ListDevicesResponse)(nil),
		(*ReplayOp_ResetRequestResponse)(nil),
		(*ReplayOp_MakeCallableResponse)(nil),
		(*ReplayOp_RunCallableResponse)(nil),
		(*ReplayOp_ReleaseCallableResponse)(nil),
	}
}

func _ReplayOp_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ReplayOp)
	// op
	switch x := m.Op.(type) {
	case *ReplayOp_CreateSession:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateSession); err != nil {
			return err
		}
	case *ReplayOp_ExtendSession:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ExtendSession); err != nil {
			return err
		}
	case *ReplayOp_PartialRunSetup:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PartialRunSetup); err != nil {
			return err
		}
	case *ReplayOp_RunStep:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RunStep); err != nil {
			return err
		}
	case *ReplayOp_CloseSession:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CloseSession); err != nil {
			return err
		}
	case *ReplayOp_ListDevices:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ListDevices); err != nil {
			return err
		}
	case *ReplayOp_ResetRequest:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ResetRequest); err != nil {
			return err
		}
	case *ReplayOp_MakeCallable:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MakeCallable); err != nil {
			return err
		}
	case *ReplayOp_RunCallable:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RunCallable); err != nil {
			return err
		}
	case *ReplayOp_ReleaseCallable:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReleaseCallable); err != nil {
			return err
		}
	case *ReplayOp_NewReplaySession:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NewReplaySession); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplayOp.Op has unexpected type %T", x)
	}
	// response
	switch x := m.Response.(type) {
	case *ReplayOp_CreateSessionResponse:
		b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateSessionResponse); err != nil {
			return err
		}
	case *ReplayOp_ExtendSessionResponse:
		b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ExtendSessionResponse); err != nil {
			return err
		}
	case *ReplayOp_PartialRunSetupResponse:
		b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PartialRunSetupResponse); err != nil {
			return err
		}
	case *ReplayOp_RunStepResponse:
		b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RunStepResponse); err != nil {
			return err
		}
	case *ReplayOp_CloseSessionResponse:
		b.EncodeVarint(25<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CloseSessionResponse); err != nil {
			return err
		}
	case *ReplayOp_ListDevicesResponse:
		b.EncodeVarint(26<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ListDevicesResponse); err != nil {
			return err
		}
	case *ReplayOp_ResetRequestResponse:
		b.EncodeVarint(27<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ResetRequestResponse); err != nil {
			return err
		}
	case *ReplayOp_MakeCallableResponse:
		b.EncodeVarint(28<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MakeCallableResponse); err != nil {
			return err
		}
	case *ReplayOp_RunCallableResponse:
		b.EncodeVarint(29<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RunCallableResponse); err != nil {
			return err
		}
	case *ReplayOp_ReleaseCallableResponse:
		b.EncodeVarint(30<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ReleaseCallableResponse); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplayOp.Response has unexpected type %T", x)
	}
	return nil
}

func _ReplayOp_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ReplayOp)
	switch tag {
	case 1: // op.create_session
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CreateSessionRequest)
		err := b.DecodeMessage(msg)
		m.Op = &ReplayOp_CreateSession{msg}
		return true, err
	case 2: // op.extend_session
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExtendSessionRequest)
		err := b.DecodeMessage(msg)
		m.Op = &ReplayOp_ExtendSession{msg}
		return true, err
	case 3: // op.partial_run_setup
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PartialRunSetupRequest)
		err := b.DecodeMessage(msg)
		m.Op = &ReplayOp_PartialRunSetup{msg}
		return true, err
	case 4: // op.run_step
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RunStepRequest)
		err := b.DecodeMessage(msg)
		m.Op = &ReplayOp_RunStep{msg}
		return true, err
	case 5: // op.close_session
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CloseSessionRequest)
		err := b.DecodeMessage(msg)
		m.Op = &ReplayOp_CloseSession{msg}
		return true, err
	case 6: // op.list_devices
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ListDevicesRequest)
		err := b.DecodeMessage(msg)
		m.Op = &ReplayOp_ListDevices{msg}
		return true, err
	case 7: // op.reset_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResetRequest)
		err := b.DecodeMessage(msg)
		m.Op = &ReplayOp_ResetRequest{msg}
		return true, err
	case 8: // op.make_callable
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MakeCallableRequest)
		err := b.DecodeMessage(msg)
		m.Op = &ReplayOp_MakeCallable{msg}
		return true, err
	case 9: // op.run_callable
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RunCallableRequest)
		err := b.DecodeMessage(msg)
		m.Op = &ReplayOp_RunCallable{msg}
		return true, err
	case 10: // op.release_callable
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReleaseCallableRequest)
		err := b.DecodeMessage(msg)
		m.Op = &ReplayOp_ReleaseCallable{msg}
		return true, err
	case 11: // op.new_replay_session
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NewReplaySession)
		err := b.DecodeMessage(msg)
		m.Op = &ReplayOp_NewReplaySession{msg}
		return true, err
	case 21: // response.create_session_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CreateSessionResponse)
		err := b.DecodeMessage(msg)
		m.Response = &ReplayOp_CreateSessionResponse{msg}
		return true, err
	case 22: // response.extend_session_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ExtendSessionResponse)
		err := b.DecodeMessage(msg)
		m.Response = &ReplayOp_ExtendSessionResponse{msg}
		return true, err
	case 23: // response.partial_run_setup_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PartialRunSetupResponse)
		err := b.DecodeMessage(msg)
		m.Response = &ReplayOp_PartialRunSetupResponse{msg}
		return true, err
	case 24: // response.run_step_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RunStepResponse)
		err := b.DecodeMessage(msg)
		m.Response = &ReplayOp_RunStepResponse{msg}
		return true, err
	case 25: // response.close_session_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CloseSessionResponse)
		err := b.DecodeMessage(msg)
		m.Response = &ReplayOp_CloseSessionResponse{msg}
		return true, err
	case 26: // response.list_devices_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ListDevicesResponse)
		err := b.DecodeMessage(msg)
		m.Response = &ReplayOp_ListDevicesResponse{msg}
		return true, err
	case 27: // response.reset_request_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResetResponse)
		err := b.DecodeMessage(msg)
		m.Response = &ReplayOp_ResetRequestResponse{msg}
		return true, err
	case 28: // response.make_callable_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MakeCallableResponse)
		err := b.DecodeMessage(msg)
		m.Response = &ReplayOp_MakeCallableResponse{msg}
		return true, err
	case 29: // response.run_callable_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RunCallableResponse)
		err := b.DecodeMessage(msg)
		m.Response = &ReplayOp_RunCallableResponse{msg}
		return true, err
	case 30: // response.release_callable_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReleaseCallableResponse)
		err := b.DecodeMessage(msg)
		m.Response = &ReplayOp_ReleaseCallableResponse{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ReplayOp_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ReplayOp)
	// op
	switch x := m.Op.(type) {
	case *ReplayOp_CreateSession:
		s := proto.Size(x.CreateSession)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplayOp_ExtendSession:
		s := proto.Size(x.ExtendSession)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplayOp_PartialRunSetup:
		s := proto.Size(x.PartialRunSetup)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplayOp_RunStep:
		s := proto.Size(x.RunStep)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplayOp_CloseSession:
		s := proto.Size(x.CloseSession)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplayOp_ListDevices:
		s := proto.Size(x.ListDevices)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplayOp_ResetRequest:
		s := proto.Size(x.ResetRequest)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplayOp_MakeCallable:
		s := proto.Size(x.MakeCallable)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplayOp_RunCallable:
		s := proto.Size(x.RunCallable)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplayOp_ReleaseCallable:
		s := proto.Size(x.ReleaseCallable)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplayOp_NewReplaySession:
		s := proto.Size(x.NewReplaySession)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// response
	switch x := m.Response.(type) {
	case *ReplayOp_CreateSessionResponse:
		s := proto.Size(x.CreateSessionResponse)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplayOp_ExtendSessionResponse:
		s := proto.Size(x.ExtendSessionResponse)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplayOp_PartialRunSetupResponse:
		s := proto.Size(x.PartialRunSetupResponse)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplayOp_RunStepResponse:
		s := proto.Size(x.RunStepResponse)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplayOp_CloseSessionResponse:
		s := proto.Size(x.CloseSessionResponse)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplayOp_ListDevicesResponse:
		s := proto.Size(x.ListDevicesResponse)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplayOp_ResetRequestResponse:
		s := proto.Size(x.ResetRequestResponse)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplayOp_MakeCallableResponse:
		s := proto.Size(x.MakeCallableResponse)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplayOp_RunCallableResponse:
		s := proto.Size(x.RunCallableResponse)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplayOp_ReleaseCallableResponse:
		s := proto.Size(x.ReleaseCallableResponse)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*NewReplaySession)(nil), "tensorflow.NewReplaySession")
	proto.RegisterType((*ReplayOp)(nil), "tensorflow.ReplayOp")
}

func init() { proto.RegisterFile("replay_log.proto", fileDescriptor_90d5038285884e03) }

var fileDescriptor_90d5038285884e03 = []byte{
	// 704 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x95, 0xdf, 0x4f, 0xd4, 0x4a,
	0x14, 0xc7, 0x29, 0x97, 0x0b, 0xcb, 0x94, 0xf2, 0x63, 0xee, 0x05, 0xca, 0xc2, 0x85, 0x65, 0x6f,
	0x34, 0xbc, 0xb8, 0x24, 0xfa, 0x60, 0x7c, 0x32, 0x61, 0xd5, 0x2c, 0x09, 0x0a, 0x0e, 0x92, 0x18,
	0x7d, 0x68, 0x66, 0xbb, 0x47, 0xa8, 0x4c, 0x7f, 0x38, 0x33, 0x15, 0xfd, 0xcf, 0x7d, 0xf0, 0xc1,
	0x74, 0xda, 0xee, 0x4c, 0x77, 0x2a, 0xf1, 0xb1, 0xdf, 0x73, 0xf2, 0x99, 0x39, 0xa7, 0xfd, 0xec,
	0xa2, 0x75, 0x0e, 0x19, 0xa3, 0xdf, 0x03, 0x96, 0x5e, 0x0f, 0x32, 0x9e, 0xca, 0x14, 0x23, 0x09,
	0x89, 0x48, 0xf9, 0x27, 0x96, 0xde, 0x75, 0xdd, 0x6b, 0x4e, 0xb3, 0x9b, 0xb2, 0xd0, 0xf5, 0x42,
	0x96, 0x0b, 0x09, 0xbc, 0x7a, 0x5c, 0x89, 0xa9, 0x7e, 0xea, 0x4b, 0xb4, 0xfe, 0x06, 0xee, 0x88,
	0x82, 0x5d, 0x82, 0x10, 0x51, 0x9a, 0xe0, 0x67, 0x68, 0x69, 0x02, 0x5f, 0xa3, 0x10, 0x84, 0xef,
	0xf4, 0x9c, 0x23, 0xf7, 0xf1, 0xc1, 0x40, 0xb3, 0x07, 0x67, 0x91, 0x90, 0x2f, 0xca, 0x32, 0x01,
	0x91, 0xa5, 0x89, 0x00, 0x52, 0xf7, 0xe3, 0x07, 0x68, 0x55, 0x94, 0x94, 0xe0, 0x86, 0x26, 0x13,
	0x06, 0xfe, 0x7c, 0xcf, 0x39, 0x5a, 0x26, 0x5e, 0x95, 0x8e, 0x54, 0xd8, 0xff, 0xe9, 0xa1, 0x4e,
	0x79, 0xe6, 0x79, 0x86, 0xfb, 0xc8, 0x13, 0x92, 0x72, 0x19, 0xc8, 0x28, 0x86, 0x20, 0x17, 0xfe,
	0x41, 0xcf, 0x39, 0x72, 0x88, 0xab, 0xc2, 0x77, 0x51, 0x0c, 0x57, 0x02, 0xef, 0x23, 0x17, 0x92,
	0xc9, 0xb4, 0xa3, 0xa7, 0x3a, 0x96, 0x21, 0x99, 0x54, 0xf5, 0x53, 0xb4, 0x1a, 0x72, 0xa0, 0x12,
	0x82, 0xea, 0xa0, 0xea, 0xe6, 0x3d, 0xf3, 0xe6, 0x43, 0xd5, 0x51, 0x4d, 0x49, 0xe0, 0x4b, 0x0e,
	0x42, 0x8e, 0xe6, 0x88, 0x17, 0x9a, 0x79, 0x81, 0x82, 0x6f, 0xb2, 0x38, 0xad, 0x46, 0xcd, 0xdb,
	0xa8, 0x97, 0xaa, 0xc3, 0x46, 0x81, 0x99, 0xe3, 0x0b, 0xb4, 0x91, 0x51, 0x2e, 0x23, 0xca, 0x02,
	0x9e, 0x27, 0x81, 0x00, 0x99, 0x67, 0xfe, 0x5f, 0x8a, 0xd6, 0x37, 0x69, 0x17, 0x65, 0x13, 0xc9,
	0x93, 0xcb, 0xa2, 0x45, 0xf3, 0xd6, 0xb2, 0x66, 0x05, 0x3f, 0x45, 0x1d, 0x45, 0x92, 0x90, 0xf9,
	0x0b, 0x0a, 0xd4, 0x35, 0x41, 0x45, 0x9f, 0x04, 0x03, 0xb0, 0xc4, 0xcb, 0x04, 0xbf, 0x42, 0x5e,
	0xc8, 0x52, 0xa1, 0xf7, 0xf3, 0xb7, 0xfd, 0x66, 0x87, 0x45, 0x83, 0x35, 0xd3, 0x4a, 0x68, 0xc4,
	0x78, 0x88, 0x56, 0x58, 0x24, 0x64, 0x50, 0x7f, 0x20, 0x8b, 0x0a, 0xb3, 0xff, 0xdb, 0x0f, 0xa4,
	0xa6, 0xb8, 0x4c, 0xa7, 0xf8, 0x39, 0xf2, 0x38, 0x08, 0x90, 0x01, 0x2f, 0xeb, 0xfe, 0x92, 0xa2,
	0xf8, 0x8d, 0x51, 0x8a, 0x06, 0xe3, 0x16, 0xdc, 0x78, 0x2e, 0xa6, 0x89, 0xe9, 0x2d, 0x04, 0x21,
	0x65, 0x8c, 0x8e, 0x19, 0xf8, 0x1d, 0x7b, 0x9a, 0xd7, 0xf4, 0x16, 0x86, 0x55, 0xdd, 0xe0, 0xc4,
	0x46, 0x5c, 0x4c, 0x53, 0xac, 0x73, 0x8a, 0x59, 0xb6, 0xa7, 0x21, 0x79, 0x62, 0x53, 0x5c, 0xae,
	0x53, 0x7c, 0x5e, 0xc8, 0xc8, 0x80, 0x0a, 0xe3, 0x3e, 0xc8, 0x7e, 0xc9, 0xa4, 0xec, 0xb1, 0x61,
	0x6b, 0xbc, 0x59, 0xc1, 0x67, 0x08, 0x27, 0x70, 0x17, 0x54, 0x86, 0xd7, 0x2f, 0xcc, 0x55, 0xc8,
	0x3d, 0x13, 0x39, 0x6b, 0xee, 0x68, 0x8e, 0xac, 0x27, 0xb3, 0x36, 0x7f, 0x44, 0xdb, 0x4d, 0x35,
	0x02, 0x5e, 0x69, 0xeb, 0x6f, 0x2a, 0xe4, 0xe1, 0x3d, 0x8e, 0x94, 0x8d, 0x23, 0x87, 0x6c, 0x86,
	0x6d, 0x85, 0x02, 0xde, 0x94, 0x45, 0xc3, 0xb7, 0x6c, 0xf8, 0x8c, 0x35, 0x1a, 0x0e, 0x6d, 0x05,
	0x3c, 0x46, 0x5d, 0x4b, 0x1f, 0xcd, 0xdf, 0x56, 0xfc, 0xff, 0xef, 0xf5, 0x68, 0x7a, 0xc2, 0x76,
	0xd6, 0x5e, 0xc2, 0xa7, 0x68, 0xa3, 0x16, 0x4a, 0xa3, 0x7d, 0x85, 0xde, 0x6d, 0x35, 0x6b, 0x8a,
	0x5c, 0xe3, 0xcd, 0x08, 0xbf, 0x47, 0x5b, 0x0d, 0xc5, 0x34, 0x6f, 0xa7, 0xe5, 0xb7, 0xa8, 0xe1,
	0xda, 0x14, 0xfa, 0x6f, 0xd8, 0x92, 0xe3, 0x2b, 0xb4, 0x69, 0x4a, 0xa7, 0xc1, 0xdd, 0x3f, 0xfa,
	0x79, 0x1e, 0x39, 0xe4, 0x1f, 0x66, 0xc7, 0xf8, 0x2d, 0xda, 0x6a, 0x68, 0xa8, 0xb9, 0xbb, 0x8a,
	0xbb, 0xd3, 0xe2, 0xa3, 0xbe, 0xa9, 0x29, 0xa4, 0xb9, 0x83, 0x86, 0x98, 0x1a, 0xb9, 0x67, 0xef,
	0xa0, 0x69, 0xa8, 0x26, 0xc7, 0x2d, 0x79, 0xb1, 0x03, 0x53, 0x55, 0x0d, 0xfe, 0xcf, 0xde, 0x41,
	0xc3, 0x59, 0xbd, 0x03, 0x6e, 0xc7, 0x98, 0xa2, 0x9d, 0x59, 0x79, 0x35, 0x7a, 0xdf, 0xfe, 0xc4,
	0x2c, 0x8b, 0xf5, 0x27, 0xc6, 0xdb, 0x4b, 0x27, 0x0b, 0x68, 0x3e, 0xcd, 0x4e, 0x10, 0xea, 0xd4,
	0xdc, 0x93, 0x87, 0x1f, 0x0e, 0xaf, 0x23, 0x79, 0x93, 0x8f, 0x07, 0x61, 0x1a, 0x1f, 0x73, 0x1a,
	0x3d, 0xca, 0x78, 0xfa, 0x19, 0x42, 0x79, 0xac, 0x4f, 0xfa, 0xe1, 0x38, 0xe3, 0x45, 0xf5, 0x1f,
	0xfd, 0xe4, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0c, 0x43, 0xad, 0xe1, 0xed, 0x07, 0x00, 0x00,
}
